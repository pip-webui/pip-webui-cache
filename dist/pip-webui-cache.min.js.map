{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/cache/cache-config.service.ts","src/cache/cache.interceptor.ts","src/cache/cache.models.ts","src/cache/cache.service.ts","src/cache/index.ts","src/index.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","cache","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","CacheConfigService","enabled","enableLogs","models","prefix","CacheConfigProvider","prototype","$get","_service","angular","provider","configureInterceptor","$httpProvider","interceptors","push","$q","pipCache","pipCacheConfig","config","_i","_a","Object","keys","model","ik","interceptor","match","exec","url","method","value","getItem","name","getKey","options","then","item","timeout","defer","promise","reject","cachedData","onResponse","body","setItem","getItems","httpParams","params","items","responseModify","itemsToResponse","resp","responseToItems","setItems","its","console","error","removeTotal","deleteItems","state_1","state_2","response","hasOwnProperty","data","rejection","resolve","defineProperty","extractPaginationDefault","res","PipCachePaginationParams","pars","_","cloneDeep","offset","parseInt","limit","PipCacheInterceptorOptions","PipCacheInterceptorSettings","PipCacheInterceptorItemSettings","_super","apply","arguments","__extends","PipCacheInterceptorCollectionSettings","PipCacheModel","cache_models_1","TotalItem","CacheService","openedDbs","Map","getDbName","modelName","charAt","toUpperCase","slice","getDb","dbName","has","get","db","Dexie","modelKey","key","stores","hashes","lastRead","meta","set","getModel","find","m","configurable","Promise","all","table","expire","maxAge","expired","Date","valueOf","groupCollapsed","log","groupEnd","_this","_b","payload","pagination","defaultsDeep","hash","objectHash","MD5","hi","total","undefined","upper","hasPagination","idxMap","filter","it","idx","plannedLength","where","anyOf","toArray","ids","reads","warn","Math","min","map","id","reason","put","promises","toCollection","modify","bulkPut","Array","fill","nh","assign","forEach","isUndefined","bulkDelete","findIndex","splice","__generator","dbs","isArray","getDatabaseNames","names","startsWith","dbs_1","name_1","clear","err","CacheProvider","pipCacheConfigProvider","$inject","enumerable","registerModel","__export"],"mappings":"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","file":"pip-webui-cache.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { PipCacheModel } from \"./cache.models\";\r\n\r\nexport interface ICacheConfigService {\r\n    enabled: boolean;\r\n    enableLogs: boolean;\r\n    models: PipCacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nexport class CacheConfigService implements ICacheConfigService {\r\n    constructor(\r\n        public enabled: boolean,\r\n        public enableLogs: boolean,\r\n        public models: PipCacheModel[],\r\n        public prefix: string\r\n    ) { }\r\n}\r\n\r\nexport interface ICacheConfigProvider {\r\n    enableLogs: boolean;\r\n    models: PipCacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nclass CacheConfigProvider implements ICacheConfigProvider, ng.IServiceProvider {\r\n\r\n    private _service: CacheConfigService;\r\n\r\n    enabled: boolean = true;\r\n    enableLogs: boolean = false;\r\n    models: PipCacheModel[] = [];\r\n    prefix: string = 'PipCache';\r\n\r\n    constructor() {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheConfigService(\r\n                this.enabled,\r\n                this.enableLogs,\r\n                this.models,\r\n                this.prefix\r\n            );\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCacheConfig', CacheConfigProvider);","import { ICacheService } from \"./cache.service\";\r\nimport { ICacheConfigService } from \"./cache-config.service\";\r\n\r\nfunction configureInterceptor(\r\n    $httpProvider: ng.IHttpProvider\r\n) {\r\n    \"ngInject\";\r\n\r\n    $httpProvider.interceptors.push(function ($q: ng.IQService, pipCache: ICacheService, pipCacheConfig: ICacheConfigService) {\r\n        return {\r\n            request: (config: ng.IRequestConfig) => {\r\n                if (!pipCacheConfig.enabled) { return config; }\r\n                for (const model of pipCache.models) {\r\n                    for (const ik of Object.keys(model.interceptors)) {\r\n                        const interceptor = model.interceptors[ik];\r\n                        const match = interceptor.match.exec(config.url);\r\n                        if (match) {\r\n                            switch (config.method) {\r\n                                case 'GET':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            return pipCache.getItem(model.name, interceptor.getKey(match), interceptor.options)\r\n                                                .then(item => {\r\n                                                    if (!item) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            pipCache.setItem(model.name, body, interceptor.options);\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        return $q.reject({ cachedData: item });\r\n                                                    }\r\n                                                });\r\n                                        case 'collection':\r\n                                            return pipCache.getItems(model.name, { httpParams: config.params, interceptor })\r\n                                                .then(items => {\r\n                                                    if (!items) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            const its = interceptor.responseModify\r\n                                                                ? interceptor.responseModify.responseToItems(body) : body;\r\n                                                            pipCache.setItems(model.name, its,\r\n                                                                { httpParams: config.params, interceptor });\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        const resp = interceptor.responseModify\r\n                                                            ? interceptor.responseModify.itemsToResponse(items) : items;\r\n                                                        return $q.reject({ cachedData: resp });\r\n                                                    }\r\n                                                });\r\n                                        default:\r\n                                            console.error(`Unknown type of interceptor (${ik})`);\r\n                                            break;\r\n                                    }\r\n                                case 'POST':\r\n                                case 'PUT':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                        case 'collection':\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.setItem(model.name, body, { removeTotal: config.method === 'POST' });\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                case 'DELETE':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.deleteItems(model.name, [interceptor.getKey(match)]);\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return config;\r\n            },\r\n            response: <T>(response: ng.IHttpPromiseCallbackArg<T>) => {\r\n                if (response.config.hasOwnProperty('onResponse') && typeof (response.config as any).onResponse === 'function') {\r\n                    (response.config as any).onResponse(response.data);\r\n                }\r\n                return response;\r\n            },\r\n            responseError: function (rejection) {\r\n                if (rejection && rejection.cachedData) {\r\n                    return $q.resolve({ data: rejection.cachedData });\r\n                }\r\n                return $q.reject(rejection);\r\n            }\r\n        } as ng.IHttpInterceptor;\r\n    });\r\n}\r\n\r\nangular\r\n    .module('pipCache')\r\n    .config(configureInterceptor);","export class PipCachePaginationParams {\r\n    offset?: number;\r\n    limit?: number;\r\n}\r\n\r\nexport function extractPaginationDefault(params: any): [PipCachePaginationParams, any] {\r\n    const res = new PipCachePaginationParams();\r\n    const pars = _.cloneDeep(params);\r\n    if (params) {\r\n        if (params.hasOwnProperty('offset')) {\r\n            res.offset = parseInt(params.offset, 10);\r\n            delete pars.offset;\r\n        }\r\n        if (params.hasOwnProperty('limit')) \r\n        {\r\n            res.limit = parseInt(params.limit, 10);\r\n            delete pars.limit;\r\n        }\r\n    }\r\n    return [res, pars];\r\n}\r\n\r\nexport class PipCacheInterceptorOptions {\r\n    maxAge?: number;\r\n}\r\n\r\nexport class PipCacheInterceptorSettings {\r\n    match: RegExp;\r\n    options?: PipCacheInterceptorOptions;\r\n}\r\n\r\nexport class PipCacheInterceptorItemSettings extends PipCacheInterceptorSettings {\r\n    getKey: (groups: any) => any;\r\n}\r\n\r\nexport class PipCacheInterceptorCollectionSettings extends PipCacheInterceptorSettings {\r\n    responseModify?: {\r\n        responseToItems: (resp: any) => any[];\r\n        itemsToResponse: (items: any[]) => any;\r\n    };\r\n    // extractPagination?: (params: HttpParams) => [PipCachePaginationParams, HttpParams];\r\n}\r\n\r\nexport class PipCacheModel {\r\n    name: string;\r\n    options: {\r\n        maxAge: number;\r\n        key?: string;\r\n    };\r\n    interceptors: {\r\n        item?: PipCacheInterceptorItemSettings;\r\n        collection?: PipCacheInterceptorCollectionSettings;\r\n    };\r\n}\r\n","import { PipCacheInterceptorOptions, PipCachePaginationParams, PipCacheModel, PipCacheInterceptorCollectionSettings, extractPaginationDefault } from './cache.models';\r\nimport { ICacheConfigProvider } from './cache-config.service';\r\n\r\ndeclare var Dexie;\r\ndeclare var objectHash;\r\n\r\nclass TotalItem {\r\n    hash: string;\r\n    total: {\r\n        value: number;\r\n        lastRead: number;\r\n    };\r\n    idxMap: any[];\r\n}\r\n\r\nexport interface ICacheService {\r\n    models: PipCacheModel[];\r\n    getItem(modelName: string, key: any, options?: PipCacheInterceptorOptions): Promise<any>;\r\n    getItems(modelName: string, payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]>;\r\n    setItem(modelName: string, item: any, options?: { removeTotal?: boolean }): Promise<any>;\r\n    setItems(modelName: string, items: any[], payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]>\r\n    deleteItems(modelName: string, keys: any[]): Promise<any>;\r\n    clear(model?: string | string[]): Promise<any>;\r\n}\r\n\r\nexport class CacheService implements ICacheService {\r\n\r\n    private openedDbs = new Map<string, any>();\r\n\r\n    constructor(private config: ICacheConfigProvider) { }\r\n\r\n    private getDbName(modelName: string): string {\r\n        if (!modelName) { throw new Error('Model name should be defined'); }\r\n        return this.config.prefix + modelName.charAt(0).toUpperCase() + modelName.slice(1);\r\n    }\r\n\r\n    private getDb(model: PipCacheModel): any {\r\n        if (!model || !model.name) { throw new Error('Model should be defined'); }\r\n        const dbName = this.getDbName(model.name);\r\n        if (this.openedDbs.has(dbName)) { return this.openedDbs.get(dbName); }\r\n        const db = new Dexie(dbName);\r\n        const modelKey = model.options.key || 'id';\r\n        db.version(2).stores({\r\n            items: modelKey,\r\n            hashes: 'hash',\r\n            lastRead: '',\r\n            meta: ''\r\n        });\r\n        this.openedDbs.set(dbName, db);\r\n        return db;\r\n    }\r\n\r\n    private getModel(modelName: string): PipCacheModel {\r\n        return this.models.find(m => m.name === modelName);\r\n    }\r\n\r\n    public get models(): PipCacheModel[] { return this.config.models || []; }\r\n\r\n    async getItem(modelName: string, key: any, options?: PipCacheInterceptorOptions): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const [expire, item] = await Promise.all([\r\n            db.table('lastRead').get(key),\r\n            db.table('items').get(key)\r\n        ]);\r\n        const maxAge = options && options.maxAge || model.options.maxAge;\r\n        const expired = expire + maxAge <= new Date().valueOf();\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET single item #' + key);\r\n            console.log('Item: ', item);\r\n            console.log('Expired: ', expired);\r\n            console.log('Expired at: ', new Date(expire));\r\n            console.groupEnd();\r\n        }\r\n        return expired ? null : item;\r\n    }\r\n    async getItems(modelName: string, payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const modelKey = model.options.key || 'id';\r\n        // get indexes of items we should receive\r\n        const maxAge = _.get(payload, 'interceptor.options.maxAge', model.options.maxAge);\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET collection of items');\r\n            console.log('Payload: ', payload);\r\n        }\r\n        const [pagination, params]: [PipCachePaginationParams, any]\r\n            = _.get(payload, 'interceptor.extractPagination', extractPaginationDefault)(payload && payload.httpParams);\r\n        const hasPagination = Object.keys(pagination).length !== 0;\r\n        const pars: PipCachePaginationParams = _.defaultsDeep(pagination, { offset: 0, limit: 0 });\r\n        const { offset, limit } = pars;\r\n        const hash = params && Object.keys(params).length ? objectHash.MD5(params) : '';\r\n        return db.table('hashes').get(hash)\r\n            .then((hi: TotalItem) => {\r\n                const total = hi && hi.total && hi.total.value && hi.total.lastRead + maxAge >= new Date().valueOf()\r\n                    ? hi.total.value : undefined;\r\n                const upper = offset + limit;\r\n                const plannedLength = hasPagination\r\n                    ? (limit ? (total ? (upper > total ? total - offset : limit) : limit) : (total ? (total - offset) : (limit)))\r\n                    : total;\r\n                let idxMap = hi && hi.idxMap || [];\r\n                if (hasPagination) {\r\n                    if (limit) {\r\n                        idxMap = idxMap.filter((it, idx) => idx >= offset && idx < upper);\r\n                        if (idxMap.length !== plannedLength) {\r\n                            if (this.config.enableLogs) {\r\n                                console.log('There\\'s not enough information about indexes');\r\n                                console.groupEnd();\r\n                            }\r\n                            return Promise.reject(null);\r\n                        }\r\n                    } else if (total !== undefined) {\r\n                        idxMap = idxMap.filter((it, idx) => idx >= offset);\r\n                        if (idxMap.length !== plannedLength) {\r\n                            if (this.config.enableLogs) {\r\n                                console.log('Not all items presented in cache');\r\n                                console.groupEnd();\r\n                            }\r\n                            return Promise.reject(null);\r\n                        }\r\n                    } else {\r\n                        if (this.config.enableLogs) {\r\n                            console.log('We want to return all items, but we don\\'t know how many they are');\r\n                            console.groupEnd();\r\n                        }\r\n                        return Promise.reject(null);\r\n                    }\r\n                } else if (total === undefined) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('We want to return all items, but we don\\'t know how many they are');\r\n                        console.groupEnd();\r\n                    }\r\n                    return Promise.reject(null);\r\n                }\r\n                return Promise.all([\r\n                    Promise.resolve(idxMap),\r\n                    !hasPagination && !hash ? db.table('items').toArray() : db.table('items').where(modelKey).anyOf(idxMap).toArray(),\r\n                    !hasPagination && !hash ? db.table('lastRead').toArray() : db.table('lastRead').where('').anyOf(idxMap).toArray()\r\n                ]);\r\n            }).then(([ids, items, reads]) => {\r\n                if (!items || items.length !== ids.length || !reads || reads.length !== ids.length) {\r\n                    if (this.config.enableLogs) {\r\n                        console.warn('Not all items presented in cache');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                if (Math.min(...reads) + maxAge <= new Date().valueOf()) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Items was expired');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                const res = ids.map(id => items.find(it => it[modelKey] === id));\r\n                if (this.config.enableLogs) {\r\n                    console.log('Items: ', res);\r\n                    console.groupEnd();\r\n                }\r\n                return res;\r\n            }).catch(reason => {\r\n                if (reason === null) {\r\n                    return null;\r\n                } else {\r\n                    throw reason;\r\n                }\r\n            });\r\n    }\r\n    async setItem(modelName: string, item: any, options?: { removeTotal?: boolean; }): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const promises = [\r\n            db.table('lastRead').put(new Date().valueOf(), item[model.options.key]),\r\n            db.table('items').put(item)\r\n        ];\r\n        if (options) {\r\n            if (options.removeTotal) {\r\n                promises.push(db.table('hashes').toCollection().modify({ total: undefined }));\r\n            }\r\n        }\r\n        return Promise.all(promises).then((data) => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] SET single item #' + item[model.options.key]);\r\n                console.log('Item: ', data[1]);\r\n                console.log('Readed at: ', new Date());\r\n                console.groupEnd();\r\n            }\r\n            return data[1];\r\n        });\r\n    }\r\n    async setItems(modelName: string, items: any[], payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const modelKey = model.options.key || 'id';\r\n        const db = this.getDb(model);\r\n        const lastRead = new Date().valueOf();\r\n        const ids = items.map(it => it[modelKey]);\r\n        let total;\r\n        const [pagination, params]: [PipCachePaginationParams, any]\r\n            = _.get(payload, 'interceptor.extractPagination', extractPaginationDefault)(payload && payload.httpParams);\r\n        const hasPagination = Object.keys(pagination).length !== 0;\r\n        const pars: PipCachePaginationParams = _.defaultsDeep(pagination, { offset: 0, limit: 0 });\r\n        const { offset, limit } = pars;\r\n        const hash = params && Object.keys(params).length ? objectHash.MD5(params) : '';\r\n        const promises = [\r\n            db.table('lastRead').bulkPut(new Array(items.length).fill(lastRead), ids),\r\n            db.table('items').bulkPut(items),\r\n            db.table('hashes').get(hash).then((hi: TotalItem) => {\r\n                const nh = hi || Object.assign(new TotalItem(), { hash, total: {}, idxMap: [] });\r\n                ids.forEach((id, idx) => nh.idxMap[idx + offset] = id);\r\n                if (hasPagination && pagination.limit && items.length && items.length < pagination.limit || !hasPagination) {\r\n                    total = (pagination.offset || 0) + items.length;\r\n                    nh.total = {\r\n                        value: total,\r\n                        lastRead\r\n                    };\r\n                }\r\n                return db.table('hashes').put(nh);\r\n            })\r\n        ];\r\n        return Promise.all(promises).then(() => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] SET collection of items');\r\n                console.log('Payload: ', payload);\r\n                console.log('Items: ', items);\r\n                console.log('Hash:', hash);\r\n                console.log('Last read at: ', new Date());\r\n                if (!_.isUndefined(total)) {\r\n                    console.log(`New total for hash [${hash}]: ${total}`);\r\n                }\r\n                console.groupEnd();\r\n            }\r\n            return items;\r\n        });\r\n    }\r\n    async deleteItems(modelName: string, keys: any[]): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        return Promise.all([\r\n            db.table('lastRead').bulkDelete(keys),\r\n            db.table('items').bulkDelete(keys),\r\n            db.transaction('rw', db.table('hashes'), async () => {\r\n                await db.table('hashes').toCollection().modify(function () {\r\n                    let removeTotal;\r\n                    keys.forEach(key => {\r\n                        const idx = this.value.idxMap.findIndex(id => id === key);\r\n                        if (idx >= 0) {\r\n                            this.value.idxMap.splice(idx, 1);\r\n                            removeTotal = true;\r\n                        }\r\n                    });\r\n                    if (removeTotal) {\r\n                        delete this.value.total;\r\n                    }\r\n                });\r\n            })\r\n        ]).then(() => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] DELETE');\r\n                console.log('Keys: ', keys);\r\n                console.groupEnd();\r\n            }\r\n        });\r\n    }\r\n    async clear(model?: string | string[]): Promise<any> {\r\n        return new Promise(resolve => {\r\n            const dbs: string[] = [];\r\n            if (model) {\r\n                Array.isArray(model)\r\n                    ? dbs.push(...model.map(m => this.getDbName(m)))\r\n                    : dbs.push(this.getDbName(model));\r\n                resolve(dbs);\r\n            } else {\r\n                resolve(Dexie.getDatabaseNames());\r\n            }\r\n        }).then((names: string[]) => {\r\n            const dbs = names.filter(name => name.startsWith(this.config.prefix));\r\n            if (this.config.enableLogs) {\r\n                console.log('databases to delete: ', names);\r\n            }\r\n            const promises = [];\r\n            for (const name of dbs) {\r\n                try {\r\n                    const db = this.openedDbs.has(name) ? this.openedDbs.get(name) : new Dexie(name);\r\n                    promises.push(db.table('items').clear());\r\n                    promises.push(db.table('meta').clear());\r\n                    promises.push(db.table('lastRead').clear());\r\n                    promises.push(db.table('hashes').clear());\r\n                } catch (err) {\r\n                    if (this.config.enableLogs) {\r\n                        console.warn('Error opening database ' + name);\r\n                    }\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        }).then(res => {\r\n            if (this.config.enableLogs) {\r\n                console.log('[PipCache] CLEAR');\r\n                if (model) { console.log('Model(s): ', model); } else { console.log('all models'); }\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport interface ICacheProvider {\r\n    models: PipCacheModel[];\r\n    registerModel(model: PipCacheModel): boolean;\r\n}\r\n\r\nclass CacheProvider implements ICacheProvider {\r\n\r\n    private _service: ICacheService;\r\n\r\n    constructor(private pipCacheConfigProvider: ICacheConfigProvider) {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public get models(): PipCacheModel[] { return this.pipCacheConfigProvider.models; }\r\n\r\n    public registerModel(model: PipCacheModel) {\r\n        if (!model) { return false; }\r\n        const res = this.models.find(m => m.name === model.name);\r\n        if (res) { return false; }\r\n        this.models.push(model);\r\n        return true;\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheService(this.pipCacheConfigProvider);\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCache', CacheProvider);","angular.module('pipCache', []);\r\n\r\nimport './cache-config.service';\r\nimport './cache.service';\r\nimport './cache.interceptor';\r\n\r\nexport * from './cache.models';\r\nexport * from './cache-config.service';\r\nexport * from './cache.service';\r\n","﻿import './cache/index';\r\n\r\nexport * from './cache/index';\r\n"]}