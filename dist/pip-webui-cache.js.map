{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../node_modules/dexie/dist/dexie.js","src/cache/cache-config.service.ts","src/cache/cache.interceptor.ts","src/cache/cache.models.ts","src/cache/cache.service.ts","src/cache/index.ts","src/index.ts"],"names":[],"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","file":"pip-webui-cache.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * Dexie.js - a minimalistic wrapper for IndexedDB\n * ===============================================\n *\n * By David Fahlander, david.fahlander@gmail.com\n *\n * Version 2.0.4, Fri May 25 2018\n *\n * http://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n */\n \n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Dexie = factory());\n}(this, (function () { 'use strict';\n\nvar keys = Object.keys;\nvar isArray = Array.isArray;\nvar _global = typeof self !== 'undefined' ? self :\n    typeof window !== 'undefined' ? window :\n        global;\nfunction extend(obj, extension) {\n    if (typeof extension !== 'object')\n        return obj;\n    keys(extension).forEach(function (key) {\n        obj[key] = extension[key];\n    });\n    return obj;\n}\nvar getProto = Object.getPrototypeOf;\nvar _hasOwn = {}.hasOwnProperty;\nfunction hasOwn(obj, prop) {\n    return _hasOwn.call(obj, prop);\n}\nfunction props(proto, extension) {\n    if (typeof extension === 'function')\n        extension = extension(getProto(proto));\n    keys(extension).forEach(function (key) {\n        setProp(proto, key, extension[key]);\n    });\n}\nvar defineProperty = Object.defineProperty;\nfunction setProp(obj, prop, functionOrGetSet, options) {\n    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, \"get\") && typeof functionOrGetSet.get === 'function' ?\n        { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :\n        { value: functionOrGetSet, configurable: true, writable: true }, options));\n}\nfunction derive(Child) {\n    return {\n        from: function (Parent) {\n            Child.prototype = Object.create(Parent.prototype);\n            setProp(Child.prototype, \"constructor\", Child);\n            return {\n                extend: props.bind(null, Child.prototype)\n            };\n        }\n    };\n}\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nfunction getPropertyDescriptor(obj, prop) {\n    var pd = getOwnPropertyDescriptor(obj, prop), proto;\n    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);\n}\nvar _slice = [].slice;\nfunction slice(args, start, end) {\n    return _slice.call(args, start, end);\n}\nfunction override(origFunc, overridedFactory) {\n    return overridedFactory(origFunc);\n}\nfunction assert(b) {\n    if (!b)\n        throw new Error(\"Assertion Failed\");\n}\nfunction asap(fn) {\n    if (_global.setImmediate)\n        setImmediate(fn);\n    else\n        setTimeout(fn, 0);\n}\n\n/** Generate an object (hash map) based on given array.\n * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to\n *        instert on the resulting object for each item in the array. If this function returns a falsy value, the\n *        current item wont affect the resulting object.\n */\nfunction arrayToObject(array, extractor) {\n    return array.reduce(function (result, item, i) {\n        var nameAndValue = extractor(item, i);\n        if (nameAndValue)\n            result[nameAndValue[0]] = nameAndValue[1];\n        return result;\n    }, {});\n}\nfunction trycatcher(fn, reject) {\n    return function () {\n        try {\n            fn.apply(this, arguments);\n        }\n        catch (e) {\n            reject(e);\n        }\n    };\n}\nfunction tryCatch(fn, onerror, args) {\n    try {\n        fn.apply(null, args);\n    }\n    catch (ex) {\n        onerror && onerror(ex);\n    }\n}\nfunction getByKeyPath(obj, keyPath) {\n    // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path\n    if (hasOwn(obj, keyPath))\n        return obj[keyPath]; // This line is moved from last to first for optimization purpose.\n    if (!keyPath)\n        return obj;\n    if (typeof keyPath !== 'string') {\n        var rv = [];\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            var val = getByKeyPath(obj, keyPath[i]);\n            rv.push(val);\n        }\n        return rv;\n    }\n    var period = keyPath.indexOf('.');\n    if (period !== -1) {\n        var innerObj = obj[keyPath.substr(0, period)];\n        return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));\n    }\n    return undefined;\n}\nfunction setByKeyPath(obj, keyPath, value) {\n    if (!obj || keyPath === undefined)\n        return;\n    if ('isFrozen' in Object && Object.isFrozen(obj))\n        return;\n    if (typeof keyPath !== 'string' && 'length' in keyPath) {\n        assert(typeof value !== 'string' && 'length' in value);\n        for (var i = 0, l = keyPath.length; i < l; ++i) {\n            setByKeyPath(obj, keyPath[i], value[i]);\n        }\n    }\n    else {\n        var period = keyPath.indexOf('.');\n        if (period !== -1) {\n            var currentKeyPath = keyPath.substr(0, period);\n            var remainingKeyPath = keyPath.substr(period + 1);\n            if (remainingKeyPath === \"\")\n                if (value === undefined)\n                    delete obj[currentKeyPath];\n                else\n                    obj[currentKeyPath] = value;\n            else {\n                var innerObj = obj[currentKeyPath];\n                if (!innerObj)\n                    innerObj = (obj[currentKeyPath] = {});\n                setByKeyPath(innerObj, remainingKeyPath, value);\n            }\n        }\n        else {\n            if (value === undefined)\n                delete obj[keyPath];\n            else\n                obj[keyPath] = value;\n        }\n    }\n}\nfunction delByKeyPath(obj, keyPath) {\n    if (typeof keyPath === 'string')\n        setByKeyPath(obj, keyPath, undefined);\n    else if ('length' in keyPath)\n        [].map.call(keyPath, function (kp) {\n            setByKeyPath(obj, kp, undefined);\n        });\n}\nfunction shallowClone(obj) {\n    var rv = {};\n    for (var m in obj) {\n        if (hasOwn(obj, m))\n            rv[m] = obj[m];\n    }\n    return rv;\n}\nvar concat = [].concat;\nfunction flatten(a) {\n    return concat.apply([], a);\n}\n//https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\nvar intrinsicTypes = \"Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set\"\n    .split(',').concat(flatten([8, 16, 32, 64].map(function (num) { return [\"Int\", \"Uint\", \"Float\"].map(function (t) { return t + num + \"Array\"; }); }))).filter(function (t) { return _global[t]; }).map(function (t) { return _global[t]; });\nfunction deepClone(any) {\n    if (!any || typeof any !== 'object')\n        return any;\n    var rv;\n    if (isArray(any)) {\n        rv = [];\n        for (var i = 0, l = any.length; i < l; ++i) {\n            rv.push(deepClone(any[i]));\n        }\n    }\n    else if (intrinsicTypes.indexOf(any.constructor) >= 0) {\n        rv = any;\n    }\n    else {\n        rv = any.constructor ? Object.create(any.constructor.prototype) : {};\n        for (var prop in any) {\n            if (hasOwn(any, prop)) {\n                rv[prop] = deepClone(any[prop]);\n            }\n        }\n    }\n    return rv;\n}\nfunction getObjectDiff(a, b, rv, prfx) {\n    // Compares objects a and b and produces a diff object.\n    rv = rv || {};\n    prfx = prfx || '';\n    keys(a).forEach(function (prop) {\n        if (!hasOwn(b, prop))\n            rv[prfx + prop] = undefined; // Property removed\n        else {\n            var ap = a[prop], bp = b[prop];\n            if (typeof ap === 'object' && typeof bp === 'object' &&\n                ap && bp &&\n                // Now compare constructors are same (not equal because wont work in Safari)\n                ('' + ap.constructor) === ('' + bp.constructor))\n                // Same type of object but its properties may have changed\n                getObjectDiff(ap, bp, rv, prfx + prop + \".\");\n            else if (ap !== bp)\n                rv[prfx + prop] = b[prop]; // Primitive value changed\n        }\n    });\n    keys(b).forEach(function (prop) {\n        if (!hasOwn(a, prop)) {\n            rv[prfx + prop] = b[prop]; // Property added\n        }\n    });\n    return rv;\n}\n// If first argument is iterable or array-like, return it as an array\nvar iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;\nvar getIteratorOf = iteratorSymbol ? function (x) {\n    var i;\n    return x != null && (i = x[iteratorSymbol]) && i.apply(x);\n} : function () { return null; };\nvar NO_CHAR_ARRAY = {};\n// Takes one or several arguments and returns an array based on the following criteras:\n// * If several arguments provided, return arguments converted to an array in a way that\n//   still allows javascript engine to optimize the code.\n// * If single argument is an array, return a clone of it.\n// * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special\n//   case to the two bullets below.\n// * If single argument is an iterable, convert it to an array and return the resulting array.\n// * If single argument is array-like (has length of type number), convert it to an array.\nfunction getArrayOf(arrayLike) {\n    var i, a, x, it;\n    if (arguments.length === 1) {\n        if (isArray(arrayLike))\n            return arrayLike.slice();\n        if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')\n            return [arrayLike];\n        if ((it = getIteratorOf(arrayLike))) {\n            a = [];\n            while ((x = it.next()), !x.done)\n                a.push(x.value);\n            return a;\n        }\n        if (arrayLike == null)\n            return [arrayLike];\n        i = arrayLike.length;\n        if (typeof i === 'number') {\n            a = new Array(i);\n            while (i--)\n                a[i] = arrayLike[i];\n            return a;\n        }\n        return [arrayLike];\n    }\n    i = arguments.length;\n    a = new Array(i);\n    while (i--)\n        a[i] = arguments[i];\n    return a;\n}\n\n// By default, debug will be true only if platform is a web platform and its page is served from localhost.\n// When debug = true, error's stacks will contain asyncronic long stacks.\nvar debug = typeof location !== 'undefined' &&\n    // By default, use debug mode if served from localhost.\n    /^(http|https):\\/\\/(localhost|127\\.0\\.0\\.1)/.test(location.href);\nfunction setDebug(value, filter) {\n    debug = value;\n    libraryFilter = filter;\n}\nvar libraryFilter = function () { return true; };\nvar NEEDS_THROW_FOR_STACK = !new Error(\"\").stack;\nfunction getErrorWithStack() {\n    \"use strict\";\n    if (NEEDS_THROW_FOR_STACK)\n        try {\n            // Doing something naughty in strict mode here to trigger a specific error\n            // that can be explicitely ignored in debugger's exception settings.\n            // If we'd just throw new Error() here, IE's debugger's exception settings\n            // will just consider it as \"exception thrown by javascript code\" which is\n            // something you wouldn't want it to ignore.\n            getErrorWithStack.arguments;\n            throw new Error(); // Fallback if above line don't throw.\n        }\n        catch (e) {\n            return e;\n        }\n    return new Error();\n}\nfunction prettyStack(exception, numIgnoredFrames) {\n    var stack = exception.stack;\n    if (!stack)\n        return \"\";\n    numIgnoredFrames = (numIgnoredFrames || 0);\n    if (stack.indexOf(exception.name) === 0)\n        numIgnoredFrames += (exception.name + exception.message).split('\\n').length;\n    return stack.split('\\n')\n        .slice(numIgnoredFrames)\n        .filter(libraryFilter)\n        .map(function (frame) { return \"\\n\" + frame; })\n        .join('');\n}\nfunction deprecated(what, fn) {\n    return function () {\n        console.warn(what + \" is deprecated. See https://github.com/dfahlander/Dexie.js/wiki/Deprecations. \" + prettyStack(getErrorWithStack(), 1));\n        return fn.apply(this, arguments);\n    };\n}\n\nvar dexieErrorNames = [\n    'Modify',\n    'Bulk',\n    'OpenFailed',\n    'VersionChange',\n    'Schema',\n    'Upgrade',\n    'InvalidTable',\n    'MissingAPI',\n    'NoSuchDatabase',\n    'InvalidArgument',\n    'SubTransaction',\n    'Unsupported',\n    'Internal',\n    'DatabaseClosed',\n    'PrematureCommit',\n    'ForeignAwait'\n];\nvar idbDomErrorNames = [\n    'Unknown',\n    'Constraint',\n    'Data',\n    'TransactionInactive',\n    'ReadOnly',\n    'Version',\n    'NotFound',\n    'InvalidState',\n    'InvalidAccess',\n    'Abort',\n    'Timeout',\n    'QuotaExceeded',\n    'Syntax',\n    'DataClone'\n];\nvar errorList = dexieErrorNames.concat(idbDomErrorNames);\nvar defaultTexts = {\n    VersionChanged: \"Database version changed by other database connection\",\n    DatabaseClosed: \"Database has been closed\",\n    Abort: \"Transaction aborted\",\n    TransactionInactive: \"Transaction has already completed or failed\"\n};\n//\n// DexieError - base class of all out exceptions.\n//\nfunction DexieError(name, msg) {\n    // Reason we don't use ES6 classes is because:\n    // 1. It bloats transpiled code and increases size of minified code.\n    // 2. It doesn't give us much in this case.\n    // 3. It would require sub classes to call super(), which\n    //    is not needed when deriving from Error.\n    this._e = getErrorWithStack();\n    this.name = name;\n    this.message = msg;\n}\nderive(DexieError).from(Error).extend({\n    stack: {\n        get: function () {\n            return this._stack ||\n                (this._stack = this.name + \": \" + this.message + prettyStack(this._e, 2));\n        }\n    },\n    toString: function () { return this.name + \": \" + this.message; }\n});\nfunction getMultiErrorMessage(msg, failures) {\n    return msg + \". Errors: \" + failures\n        .map(function (f) { return f.toString(); })\n        .filter(function (v, i, s) { return s.indexOf(v) === i; }) // Only unique error strings\n        .join('\\n');\n}\n//\n// ModifyError - thrown in Collection.modify()\n// Specific constructor because it contains members failures and failedKeys.\n//\nfunction ModifyError(msg, failures, successCount, failedKeys) {\n    this._e = getErrorWithStack();\n    this.failures = failures;\n    this.failedKeys = failedKeys;\n    this.successCount = successCount;\n}\nderive(ModifyError).from(DexieError);\nfunction BulkError(msg, failures) {\n    this._e = getErrorWithStack();\n    this.name = \"BulkError\";\n    this.failures = failures;\n    this.message = getMultiErrorMessage(msg, failures);\n}\nderive(BulkError).from(DexieError);\n//\n//\n// Dynamically generate error names and exception classes based\n// on the names in errorList.\n//\n//\n// Map of {ErrorName -> ErrorName + \"Error\"}\nvar errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + \"Error\", obj); }, {});\n// Need an alias for DexieError because we're gonna create subclasses with the same name.\nvar BaseException = DexieError;\n// Map of {ErrorName -> exception constructor}\nvar exceptions = errorList.reduce(function (obj, name) {\n    // Let the name be \"DexieError\" because this name may\n    // be shown in call stack and when debugging. DexieError is\n    // the most true name because it derives from DexieError,\n    // and we cannot change Function.name programatically without\n    // dynamically create a Function object, which would be considered\n    // 'eval-evil'.\n    var fullName = name + \"Error\";\n    function DexieError(msgOrInner, inner) {\n        this._e = getErrorWithStack();\n        this.name = fullName;\n        if (!msgOrInner) {\n            this.message = defaultTexts[name] || fullName;\n            this.inner = null;\n        }\n        else if (typeof msgOrInner === 'string') {\n            this.message = msgOrInner;\n            this.inner = inner || null;\n        }\n        else if (typeof msgOrInner === 'object') {\n            this.message = msgOrInner.name + \" \" + msgOrInner.message;\n            this.inner = msgOrInner;\n        }\n    }\n    derive(DexieError).from(BaseException);\n    obj[name] = DexieError;\n    return obj;\n}, {});\n// Use ECMASCRIPT standard exceptions where applicable:\nexceptions.Syntax = SyntaxError;\nexceptions.Type = TypeError;\nexceptions.Range = RangeError;\nvar exceptionMap = idbDomErrorNames.reduce(function (obj, name) {\n    obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\nfunction mapError(domError, message) {\n    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])\n        return domError;\n    var rv = new exceptionMap[domError.name](message || domError.message, domError);\n    if (\"stack\" in domError) {\n        // Derive stack from inner exception if it has a stack\n        setProp(rv, \"stack\", { get: function () {\n                return this.inner.stack;\n            } });\n    }\n    return rv;\n}\nvar fullNameExceptions = errorList.reduce(function (obj, name) {\n    if ([\"Syntax\", \"Type\", \"Range\"].indexOf(name) === -1)\n        obj[name + \"Error\"] = exceptions[name];\n    return obj;\n}, {});\nfullNameExceptions.ModifyError = ModifyError;\nfullNameExceptions.DexieError = DexieError;\nfullNameExceptions.BulkError = BulkError;\n\nfunction nop() { }\nfunction mirror(val) { return val; }\nfunction pureFunctionChain(f1, f2) {\n    // Enables chained events that takes ONE argument and returns it to the next function in chain.\n    // This pattern is used in the hook(\"reading\") event.\n    if (f1 == null || f1 === mirror)\n        return f2;\n    return function (val) {\n        return f2(f1(val));\n    };\n}\nfunction callBoth(on1, on2) {\n    return function () {\n        on1.apply(this, arguments);\n        on2.apply(this, arguments);\n    };\n}\nfunction hookCreatingChain(f1, f2) {\n    // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.\n    // This pattern is used in the hook(\"creating\") event.\n    if (f1 === nop)\n        return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res !== undefined)\n            arguments[0] = res;\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res2 !== undefined ? res2 : res;\n    };\n}\nfunction hookDeletingChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        f1.apply(this, arguments);\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = this.onerror = null;\n        f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n    };\n}\nfunction hookUpdatingChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function (modifications) {\n        var res = f1.apply(this, arguments);\n        extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.\n        var onsuccess = this.onsuccess, // In case event listener has set this.onsuccess\n        onerror = this.onerror; // In case event listener has set this.onerror\n        this.onsuccess = null;\n        this.onerror = null;\n        var res2 = f2.apply(this, arguments);\n        if (onsuccess)\n            this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;\n        if (onerror)\n            this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;\n        return res === undefined ?\n            (res2 === undefined ? undefined : res2) :\n            (extend(res, res2));\n    };\n}\nfunction reverseStoppableEventChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        if (f2.apply(this, arguments) === false)\n            return false;\n        return f1.apply(this, arguments);\n    };\n}\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop)\n        return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this, i = arguments.length, args = new Array(i);\n            while (i--)\n                args[i] = arguments[i];\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n/*\n * Copyright (c) 2014-2017 David Fahlander\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0\n */\n//\n// Promise and Zone (PSD) for Dexie library\n//\n// I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by\n// https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.\n//\n// In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another\n// tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use\n// another strategy now that simplifies everything a lot: to always execute callbacks in a new micro-task, but have an own micro-task\n// engine that is indexedDB compliant across all browsers.\n// Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.\n// Also with inspiration from bluebird, asyncronic stacks in debug mode.\n//\n// Specific non-standard features of this Promise class:\n// * Custom zone support (a.k.a. PSD) with ability to keep zones also when using native promises as well as\n//   native async / await.\n// * Promise.follow() method built upon the custom zone engine, that allows user to track all promises created from current stack frame\n//   and below + all promises that those promises creates or awaits.\n// * Detect any unhandled promise in a PSD-scope (PSD.onunhandled). \n//\n// David Fahlander, https://github.com/dfahlander\n//\n// Just a pointer that only this module knows about.\n// Used in Promise constructor to emulate a private constructor.\nvar INTERNAL = {};\n// Async stacks (long stacks) must not grow infinitely.\nvar LONG_STACKS_CLIP_LIMIT = 100;\nvar MAX_LONG_STACKS = 20;\nvar ZONE_ECHO_LIMIT = 7;\nvar nativePromiseInstanceAndProto = (function () {\n    try {\n        // Be able to patch native async functions\n        return new Function(\"let F=async ()=>{},p=F();return [p,Object.getPrototypeOf(p),Promise.resolve(),F.constructor];\")();\n    }\n    catch (e) {\n        var P = _global.Promise;\n        return P ?\n            [P.resolve(), P.prototype, P.resolve()] :\n            [];\n    }\n})();\nvar resolvedNativePromise = nativePromiseInstanceAndProto[0];\nvar nativePromiseProto = nativePromiseInstanceAndProto[1];\nvar resolvedGlobalPromise = nativePromiseInstanceAndProto[2];\nvar nativePromiseThen = nativePromiseProto && nativePromiseProto.then;\nvar NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;\nvar AsyncFunction = nativePromiseInstanceAndProto[3];\nvar patchGlobalPromise = !!resolvedGlobalPromise;\nvar stack_being_generated = false;\n/* The default function used only for the very first promise in a promise chain.\n   As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks\n   emulated in this module. For indexedDB compatibility, this means that every method needs to\n   execute at least one promise before doing an indexedDB operation. Dexie will always call\n   db.ready().then() for every operation to make sure the indexedDB event is started in an\n   indexedDB-compatible emulated micro task loop.\n*/\nvar schedulePhysicalTick = resolvedGlobalPromise ?\n    function () { resolvedGlobalPromise.then(physicalTick); }\n    :\n        _global.setImmediate ?\n            // setImmediate supported. Those modern platforms also supports Function.bind().\n            setImmediate.bind(null, physicalTick) :\n            _global.MutationObserver ?\n                // MutationObserver supported\n                function () {\n                    var hiddenDiv = document.createElement(\"div\");\n                    (new MutationObserver(function () {\n                        physicalTick();\n                        hiddenDiv = null;\n                    })).observe(hiddenDiv, { attributes: true });\n                    hiddenDiv.setAttribute('i', '1');\n                } :\n                // No support for setImmediate or MutationObserver. No worry, setTimeout is only called\n                // once time. Every tick that follows will be our emulated micro tick.\n                // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug \n                function () { setTimeout(physicalTick, 0); };\n// Configurable through Promise.scheduler.\n// Don't export because it would be unsafe to let unknown\n// code call it unless they do try..catch within their callback.\n// This function can be retrieved through getter of Promise.scheduler though,\n// but users must not do Promise.scheduler = myFuncThatThrowsException\nvar asap$1 = function (callback, args) {\n    microtickQueue.push([callback, args]);\n    if (needsNewPhysicalTick) {\n        schedulePhysicalTick();\n        needsNewPhysicalTick = false;\n    }\n};\nvar isOutsideMicroTick = true;\nvar needsNewPhysicalTick = true;\nvar unhandledErrors = [];\nvar rejectingErrors = [];\nvar currentFulfiller = null;\nvar rejectionMapper = mirror; // Remove in next major when removing error mapping of DOMErrors and DOMExceptions\nvar globalPSD = {\n    id: 'global',\n    global: true,\n    ref: 0,\n    unhandleds: [],\n    onunhandled: globalError,\n    pgp: false,\n    env: {},\n    finalize: function () {\n        this.unhandleds.forEach(function (uh) {\n            try {\n                globalError(uh[0], uh[1]);\n            }\n            catch (e) { }\n        });\n    }\n};\nvar PSD = globalPSD;\nvar microtickQueue = []; // Callbacks to call in this or next physical tick.\nvar numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.\nvar tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.\nfunction Promise(fn) {\n    if (typeof this !== 'object')\n        throw new TypeError('Promises must be constructed via new');\n    this._listeners = [];\n    this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.\n    // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()\n    // execute the microtask engine implicitely within the call to resolve() or reject().\n    // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack\n    // only contains library code when calling resolve() or reject().\n    // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from\n    // global scope (event handler, timer etc)!\n    this._lib = false;\n    // Current async scope\n    var psd = (this._PSD = PSD);\n    if (debug) {\n        this._stackHolder = getErrorWithStack();\n        this._prev = null;\n        this._numPrev = 0; // Number of previous promises (for long stacks)\n    }\n    if (typeof fn !== 'function') {\n        if (fn !== INTERNAL)\n            throw new TypeError('Not a function');\n        // Private constructor (INTERNAL, state, value).\n        // Used internally by Promise.resolve() and Promise.reject().\n        this._state = arguments[1];\n        this._value = arguments[2];\n        if (this._state === false)\n            handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().\n        return;\n    }\n    this._state = null; // null (=pending), false (=rejected) or true (=resolved)\n    this._value = null; // error or result\n    ++psd.ref; // Refcounting current scope\n    executePromiseTask(this, fn);\n}\n// Prepare a property descriptor to put onto Promise.prototype.then\nvar thenProp = {\n    get: function () {\n        var psd = PSD, microTaskId = totalEchoes;\n        function then(onFulfilled, onRejected) {\n            var _this = this;\n            var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);\n            if (possibleAwait)\n                decrementExpectedAwaits();\n            var rv = new Promise(function (resolve, reject) {\n                propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));\n            });\n            debug && linkToPreviousPromise(rv, this);\n            return rv;\n        }\n        then.prototype = INTERNAL; // For idempotense, see setter below.\n        return then;\n    },\n    // Be idempotent and allow another framework (such as zone.js or another instance of a Dexie.Promise module) to replace Promise.prototype.then\n    // and when that framework wants to restore the original property, we must identify that and restore the original property descriptor.\n    set: function (value) {\n        setProp(this, 'then', value && value.prototype === INTERNAL ?\n            thenProp : // Restore to original property descriptor.\n            {\n                get: function () {\n                    return value; // Getter returning provided value (behaves like value is just changed)\n                },\n                set: thenProp.set // Keep a setter that is prepared to restore original.\n            });\n    }\n};\nprops(Promise.prototype, {\n    then: thenProp,\n    _then: function (onFulfilled, onRejected) {\n        // A little tinier version of then() that don't have to create a resulting promise.\n        propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));\n    },\n    catch: function (onRejected) {\n        if (arguments.length === 1)\n            return this.then(null, onRejected);\n        // First argument is the Error type to catch\n        var type = arguments[0], handler = arguments[1];\n        return typeof type === 'function' ? this.then(null, function (err) {\n            // Catching errors by its constructor type (similar to java / c++ / c#)\n            // Sample: promise.catch(TypeError, function (e) { ... });\n            return err instanceof type ? handler(err) : PromiseReject(err);\n        })\n            : this.then(null, function (err) {\n                // Catching errors by the error.name property. Makes sense for indexedDB where error type\n                // is always DOMError but where e.name tells the actual error type.\n                // Sample: promise.catch('ConstraintError', function (e) { ... });\n                return err && err.name === type ? handler(err) : PromiseReject(err);\n            });\n    },\n    finally: function (onFinally) {\n        return this.then(function (value) {\n            onFinally();\n            return value;\n        }, function (err) {\n            onFinally();\n            return PromiseReject(err);\n        });\n    },\n    stack: {\n        get: function () {\n            if (this._stack)\n                return this._stack;\n            try {\n                stack_being_generated = true;\n                var stacks = getStack(this, [], MAX_LONG_STACKS);\n                var stack = stacks.join(\"\\nFrom previous: \");\n                if (this._state !== null)\n                    this._stack = stack; // Stack may be updated on reject.\n                return stack;\n            }\n            finally {\n                stack_being_generated = false;\n            }\n        }\n    },\n    timeout: function (ms, msg) {\n        var _this = this;\n        return ms < Infinity ?\n            new Promise(function (resolve, reject) {\n                var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);\n                _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));\n            }) : this;\n    }\n});\nif (typeof Symbol !== 'undefined' && Symbol.toStringTag)\n    setProp(Promise.prototype, Symbol.toStringTag, 'Promise');\n// Now that Promise.prototype is defined, we have all it takes to set globalPSD.env.\n// Environment globals snapshotted on leaving global zone\nglobalPSD.env = snapShot();\nfunction Listener(onFulfilled, onRejected, resolve, reject, zone) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.resolve = resolve;\n    this.reject = reject;\n    this.psd = zone;\n}\n// Promise Static Properties\nprops(Promise, {\n    all: function () {\n        var values = getArrayOf.apply(null, arguments) // Supports iterables, implicit arguments and array-like.\n            .map(onPossibleParallellAsync); // Handle parallell async/awaits \n        return new Promise(function (resolve, reject) {\n            if (values.length === 0)\n                resolve([]);\n            var remaining = values.length;\n            values.forEach(function (a, i) { return Promise.resolve(a).then(function (x) {\n                values[i] = x;\n                if (!--remaining)\n                    resolve(values);\n            }, reject); });\n        });\n    },\n    resolve: function (value) {\n        if (value instanceof Promise)\n            return value;\n        if (value && typeof value.then === 'function')\n            return new Promise(function (resolve, reject) {\n                value.then(resolve, reject);\n            });\n        var rv = new Promise(INTERNAL, true, value);\n        linkToPreviousPromise(rv, currentFulfiller);\n        return rv;\n    },\n    reject: PromiseReject,\n    race: function () {\n        var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);\n        return new Promise(function (resolve, reject) {\n            values.map(function (value) { return Promise.resolve(value).then(resolve, reject); });\n        });\n    },\n    PSD: {\n        get: function () { return PSD; },\n        set: function (value) { return PSD = value; }\n    },\n    //totalEchoes: {get: ()=>totalEchoes},\n    //task: {get: ()=>task},\n    newPSD: newScope,\n    usePSD: usePSD,\n    scheduler: {\n        get: function () { return asap$1; },\n        set: function (value) { asap$1 = value; }\n    },\n    rejectionMapper: {\n        get: function () { return rejectionMapper; },\n        set: function (value) { rejectionMapper = value; } // Map reject failures\n    },\n    follow: function (fn, zoneProps) {\n        return new Promise(function (resolve, reject) {\n            return newScope(function (resolve, reject) {\n                var psd = PSD;\n                psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()\n                psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.\n                psd.finalize = callBoth(function () {\n                    var _this = this;\n                    // Unhandled standard or 3rd part promises are put in PSD.unhandleds and\n                    // examined upon scope completion while unhandled rejections in this Promise\n                    // will trigger directly through psd.onunhandled\n                    run_at_end_of_this_or_next_physical_tick(function () {\n                        _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);\n                    });\n                }, psd.finalize);\n                fn();\n            }, zoneProps, resolve, reject);\n        });\n    }\n});\n/**\n* Take a potentially misbehaving resolver function and make sure\n* onFulfilled and onRejected are only called once.\n*\n* Makes no guarantees about asynchrony.\n*/\nfunction executePromiseTask(promise, fn) {\n    // Promise Resolution Procedure:\n    // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    try {\n        fn(function (value) {\n            if (promise._state !== null)\n                return; // Already settled\n            if (value === promise)\n                throw new TypeError('A promise cannot be resolved with itself.');\n            var shouldExecuteTick = promise._lib && beginMicroTickScope();\n            if (value && typeof value.then === 'function') {\n                executePromiseTask(promise, function (resolve, reject) {\n                    value instanceof Promise ?\n                        value._then(resolve, reject) :\n                        value.then(resolve, reject);\n                });\n            }\n            else {\n                promise._state = true;\n                promise._value = value;\n                propagateAllListeners(promise);\n            }\n            if (shouldExecuteTick)\n                endMicroTickScope();\n        }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below\n    }\n    catch (ex) {\n        handleRejection(promise, ex);\n    }\n}\nfunction handleRejection(promise, reason) {\n    rejectingErrors.push(reason);\n    if (promise._state !== null)\n        return;\n    var shouldExecuteTick = promise._lib && beginMicroTickScope();\n    reason = rejectionMapper(reason);\n    promise._state = false;\n    promise._value = reason;\n    debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {\n        var origProp = getPropertyDescriptor(reason, \"stack\");\n        reason._promise = promise;\n        setProp(reason, \"stack\", {\n            get: function () {\n                return stack_being_generated ?\n                    origProp && (origProp.get ?\n                        origProp.get.apply(reason) :\n                        origProp.value) :\n                    promise.stack;\n            }\n        });\n    });\n    // Add the failure to a list of possibly uncaught errors\n    addPossiblyUnhandledError(promise);\n    propagateAllListeners(promise);\n    if (shouldExecuteTick)\n        endMicroTickScope();\n}\nfunction propagateAllListeners(promise) {\n    //debug && linkToPreviousPromise(promise);\n    var listeners = promise._listeners;\n    promise._listeners = [];\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n        propagateToListener(promise, listeners[i]);\n    }\n    var psd = promise._PSD;\n    --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();\n    if (numScheduledCalls === 0) {\n        // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,\n        // and that no deferreds where listening to this rejection or success.\n        // Since there is a risk that our stack can contain application code that may\n        // do stuff after this code is finished that may generate new calls, we cannot\n        // call finalizers here.\n        ++numScheduledCalls;\n        asap$1(function () {\n            if (--numScheduledCalls === 0)\n                finalizePhysicalTick(); // Will detect unhandled errors\n        }, []);\n    }\n}\nfunction propagateToListener(promise, listener) {\n    if (promise._state === null) {\n        promise._listeners.push(listener);\n        return;\n    }\n    var cb = promise._state ? listener.onFulfilled : listener.onRejected;\n    if (cb === null) {\n        // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()\n        return (promise._state ? listener.resolve : listener.reject)(promise._value);\n    }\n    ++listener.psd.ref;\n    ++numScheduledCalls;\n    asap$1(callListener, [cb, promise, listener]);\n}\nfunction callListener(cb, promise, listener) {\n    try {\n        // Set static variable currentFulfiller to the promise that is being fullfilled,\n        // so that we connect the chain of promises (for long stacks support)\n        currentFulfiller = promise;\n        // Call callback and resolve our listener with it's return value.\n        var ret, value = promise._value;\n        if (promise._state) {\n            // cb is onResolved\n            ret = cb(value);\n        }\n        else {\n            // cb is onRejected\n            if (rejectingErrors.length)\n                rejectingErrors = [];\n            ret = cb(value);\n            if (rejectingErrors.indexOf(value) === -1)\n                markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.\n        }\n        listener.resolve(ret);\n    }\n    catch (e) {\n        // Exception thrown in callback. Reject our listener.\n        listener.reject(e);\n    }\n    finally {\n        // Restore env and currentFulfiller.\n        currentFulfiller = null;\n        if (--numScheduledCalls === 0)\n            finalizePhysicalTick();\n        --listener.psd.ref || listener.psd.finalize();\n    }\n}\nfunction getStack(promise, stacks, limit) {\n    if (stacks.length === limit)\n        return stacks;\n    var stack = \"\";\n    if (promise._state === false) {\n        var failure = promise._value, errorName, message;\n        if (failure != null) {\n            errorName = failure.name || \"Error\";\n            message = failure.message || failure;\n            stack = prettyStack(failure, 0);\n        }\n        else {\n            errorName = failure; // If error is undefined or null, show that.\n            message = \"\";\n        }\n        stacks.push(errorName + (message ? \": \" + message : \"\") + stack);\n    }\n    if (debug) {\n        stack = prettyStack(promise._stackHolder, 2);\n        if (stack && stacks.indexOf(stack) === -1)\n            stacks.push(stack);\n        if (promise._prev)\n            getStack(promise._prev, stacks, limit);\n    }\n    return stacks;\n}\nfunction linkToPreviousPromise(promise, prev) {\n    // Support long stacks by linking to previous completed promise.\n    var numPrev = prev ? prev._numPrev + 1 : 0;\n    if (numPrev < LONG_STACKS_CLIP_LIMIT) {\n        promise._prev = prev;\n        promise._numPrev = numPrev;\n    }\n}\n/* The callback to schedule with setImmediate() or setTimeout().\n   It runs a virtual microtick and executes any callback registered in microtickQueue.\n */\nfunction physicalTick() {\n    beginMicroTickScope() && endMicroTickScope();\n}\nfunction beginMicroTickScope() {\n    var wasRootExec = isOutsideMicroTick;\n    isOutsideMicroTick = false;\n    needsNewPhysicalTick = false;\n    return wasRootExec;\n}\n/* Executes micro-ticks without doing try..catch.\n   This can be possible because we only use this internally and\n   the registered functions are exception-safe (they do try..catch\n   internally before calling any external method). If registering\n   functions in the microtickQueue that are not exception-safe, this\n   would destroy the framework and make it instable. So we don't export\n   our asap method.\n*/\nfunction endMicroTickScope() {\n    var callbacks, i, l;\n    do {\n        while (microtickQueue.length > 0) {\n            callbacks = microtickQueue;\n            microtickQueue = [];\n            l = callbacks.length;\n            for (i = 0; i < l; ++i) {\n                var item = callbacks[i];\n                item[0].apply(null, item[1]);\n            }\n        }\n    } while (microtickQueue.length > 0);\n    isOutsideMicroTick = true;\n    needsNewPhysicalTick = true;\n}\nfunction finalizePhysicalTick() {\n    var unhandledErrs = unhandledErrors;\n    unhandledErrors = [];\n    unhandledErrs.forEach(function (p) {\n        p._PSD.onunhandled.call(null, p._value, p);\n    });\n    var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.\n    var i = finalizers.length;\n    while (i)\n        finalizers[--i]();\n}\nfunction run_at_end_of_this_or_next_physical_tick(fn) {\n    function finalizer() {\n        fn();\n        tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);\n    }\n    tickFinalizers.push(finalizer);\n    ++numScheduledCalls;\n    asap$1(function () {\n        if (--numScheduledCalls === 0)\n            finalizePhysicalTick();\n    }, []);\n}\nfunction addPossiblyUnhandledError(promise) {\n    // Only add to unhandledErrors if not already there. The first one to add to this list\n    // will be upon the first rejection so that the root cause (first promise in the\n    // rejection chain) is the one listed.\n    if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))\n        unhandledErrors.push(promise);\n}\nfunction markErrorAsHandled(promise) {\n    // Called when a reject handled is actually being called.\n    // Search in unhandledErrors for any promise whos _value is this promise_value (list\n    // contains only rejected promises, and only one item per error)\n    var i = unhandledErrors.length;\n    while (i)\n        if (unhandledErrors[--i]._value === promise._value) {\n            // Found a promise that failed with this same error object pointer,\n            // Remove that since there is a listener that actually takes care of it.\n            unhandledErrors.splice(i, 1);\n            return;\n        }\n}\nfunction PromiseReject(reason) {\n    return new Promise(INTERNAL, false, reason);\n}\nfunction wrap(fn, errorCatcher) {\n    var psd = PSD;\n    return function () {\n        var wasRootExec = beginMicroTickScope(), outerScope = PSD;\n        try {\n            switchToZone(psd, true);\n            return fn.apply(this, arguments);\n        }\n        catch (e) {\n            errorCatcher && errorCatcher(e);\n        }\n        finally {\n            switchToZone(outerScope, false);\n            if (wasRootExec)\n                endMicroTickScope();\n        }\n    };\n}\n//\n// variables used for native await support\n//\nvar task = { awaits: 0, echoes: 0, id: 0 }; // The ongoing macro-task when using zone-echoing.\nvar taskCounter = 0; // ID counter for macro tasks.\nvar zoneStack = []; // Stack of left zones to restore asynchronically.\nvar zoneEchoes = 0; // zoneEchoes is a must in order to persist zones between native await expressions.\nvar totalEchoes = 0; // ID counter for micro-tasks. Used to detect possible native await in our Promise.prototype.then.\nvar zone_id_counter = 0;\nfunction newScope(fn, props$$1, a1, a2) {\n    var parent = PSD, psd = Object.create(parent);\n    psd.parent = parent;\n    psd.ref = 0;\n    psd.global = false;\n    psd.id = ++zone_id_counter;\n    // Prepare for promise patching (done in usePSD):\n    var globalEnv = globalPSD.env;\n    psd.env = patchGlobalPromise ? {\n        Promise: Promise,\n        PromiseProp: { value: Promise, configurable: true, writable: true },\n        all: Promise.all,\n        race: Promise.race,\n        resolve: Promise.resolve,\n        reject: Promise.reject,\n        nthen: getPatchedPromiseThen(globalEnv.nthen, psd),\n        gthen: getPatchedPromiseThen(globalEnv.gthen, psd) // global then\n    } : {};\n    if (props$$1)\n        extend(psd, props$$1);\n    // unhandleds and onunhandled should not be specifically set here.\n    // Leave them on parent prototype.\n    // unhandleds.push(err) will push to parent's prototype\n    // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)\n    ++parent.ref;\n    psd.finalize = function () {\n        --this.parent.ref || this.parent.finalize();\n    };\n    var rv = usePSD(psd, fn, a1, a2);\n    if (psd.ref === 0)\n        psd.finalize();\n    return rv;\n}\n// Function to call if scopeFunc returns NativePromise\n// Also for each NativePromise in the arguments to Promise.all()\nfunction incrementExpectedAwaits() {\n    if (!task.id)\n        task.id = ++taskCounter;\n    ++task.awaits;\n    task.echoes += ZONE_ECHO_LIMIT;\n    return task.id;\n}\n// Function to call when 'then' calls back on a native promise where onAwaitExpected() had been called.\n// Also call this when a native await calls then method on a promise. In that case, don't supply\n// sourceTaskId because we already know it refers to current task.\nfunction decrementExpectedAwaits(sourceTaskId) {\n    if (!task.awaits || (sourceTaskId && sourceTaskId !== task.id))\n        return;\n    if (--task.awaits === 0)\n        task.id = 0;\n    task.echoes = task.awaits * ZONE_ECHO_LIMIT; // Will reset echoes to 0 if awaits is 0.\n}\n// Call from Promise.all() and Promise.race()\nfunction onPossibleParallellAsync(possiblePromise) {\n    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {\n        incrementExpectedAwaits();\n        return possiblePromise.then(function (x) {\n            decrementExpectedAwaits();\n            return x;\n        }, function (e) {\n            decrementExpectedAwaits();\n            return rejection(e);\n        });\n    }\n    return possiblePromise;\n}\nfunction zoneEnterEcho(targetZone) {\n    ++totalEchoes;\n    if (!task.echoes || --task.echoes === 0) {\n        task.echoes = task.id = 0; // Cancel zone echoing.\n    }\n    zoneStack.push(PSD);\n    switchToZone(targetZone, true);\n}\nfunction zoneLeaveEcho() {\n    var zone = zoneStack[zoneStack.length - 1];\n    zoneStack.pop();\n    switchToZone(zone, false);\n}\nfunction switchToZone(targetZone, bEnteringZone) {\n    var currentZone = PSD;\n    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {\n        // Enter or leave zone asynchronically as well, so that tasks initiated during current tick\n        // will be surrounded by the zone when they are invoked.\n        enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);\n    }\n    if (targetZone === PSD)\n        return;\n    PSD = targetZone; // The actual zone switch occurs at this line.\n    // Snapshot on every leave from global zone.\n    if (currentZone === globalPSD)\n        globalPSD.env = snapShot();\n    if (patchGlobalPromise) {\n        // Let's patch the global and native Promises (may be same or may be different)\n        var GlobalPromise = globalPSD.env.Promise;\n        // Swich environments (may be PSD-zone or the global zone. Both apply.)\n        var targetEnv = targetZone.env;\n        // Change Promise.prototype.then for native and global Promise (they MAY differ on polyfilled environments, but both can be accessed)\n        // Must be done on each zone change because the patched method contains targetZone in its closure.\n        nativePromiseProto.then = targetEnv.nthen;\n        GlobalPromise.prototype.then = targetEnv.gthen;\n        if (currentZone.global || targetZone.global) {\n            // Leaving or entering global zone. It's time to patch / restore global Promise.\n            // Set this Promise to window.Promise so that transiled async functions will work on Firefox, Safari and IE, as well as with Zonejs and angular.\n            Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);\n            // Support Promise.all() etc to work indexedDB-safe also when people are including es6-promise as a module (they might\n            // not be accessing global.Promise but a local reference to it)\n            GlobalPromise.all = targetEnv.all;\n            GlobalPromise.race = targetEnv.race;\n            GlobalPromise.resolve = targetEnv.resolve;\n            GlobalPromise.reject = targetEnv.reject;\n        }\n    }\n}\nfunction snapShot() {\n    var GlobalPromise = _global.Promise;\n    return patchGlobalPromise ? {\n        Promise: GlobalPromise,\n        PromiseProp: Object.getOwnPropertyDescriptor(_global, \"Promise\"),\n        all: GlobalPromise.all,\n        race: GlobalPromise.race,\n        resolve: GlobalPromise.resolve,\n        reject: GlobalPromise.reject,\n        nthen: nativePromiseProto.then,\n        gthen: GlobalPromise.prototype.then\n    } : {};\n}\nfunction usePSD(psd, fn, a1, a2, a3) {\n    var outerScope = PSD;\n    try {\n        switchToZone(psd, true);\n        return fn(a1, a2, a3);\n    }\n    finally {\n        switchToZone(outerScope, false);\n    }\n}\nfunction enqueueNativeMicroTask(job) {\n    //\n    // Precondition: nativePromiseThen !== undefined\n    //\n    nativePromiseThen.call(resolvedNativePromise, job);\n}\nfunction nativeAwaitCompatibleWrap(fn, zone, possibleAwait) {\n    return typeof fn !== 'function' ? fn : function () {\n        var outerZone = PSD;\n        if (possibleAwait)\n            incrementExpectedAwaits();\n        switchToZone(zone, true);\n        try {\n            return fn.apply(this, arguments);\n        }\n        finally {\n            switchToZone(outerZone, false);\n        }\n    };\n}\nfunction getPatchedPromiseThen(origThen, zone) {\n    return function (onResolved, onRejected) {\n        return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));\n    };\n}\nvar UNHANDLEDREJECTION = \"unhandledrejection\";\nfunction globalError(err, promise) {\n    var rv;\n    try {\n        rv = promise.onuncatched(err);\n    }\n    catch (e) { }\n    if (rv !== false)\n        try {\n            var event, eventData = { promise: promise, reason: err };\n            if (_global.document && document.createEvent) {\n                event = document.createEvent('Event');\n                event.initEvent(UNHANDLEDREJECTION, true, true);\n                extend(event, eventData);\n            }\n            else if (_global.CustomEvent) {\n                event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });\n                extend(event, eventData);\n            }\n            if (event && _global.dispatchEvent) {\n                dispatchEvent(event);\n                if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)\n                    // No native support for PromiseRejectionEvent but user has set window.onunhandledrejection. Manually call it.\n                    try {\n                        _global.onunhandledrejection(event);\n                    }\n                    catch (_) { }\n            }\n            if (!event.defaultPrevented) {\n                console.warn(\"Unhandled rejection: \" + (err.stack || err));\n            }\n        }\n        catch (e) { }\n}\nvar rejection = Promise.reject;\n\nfunction Events(ctx) {\n    var evs = {};\n    var rv = function (eventName, subscriber) {\n        if (subscriber) {\n            // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.\n            var i = arguments.length, args = new Array(i - 1);\n            while (--i)\n                args[i - 1] = arguments[i];\n            evs[eventName].subscribe.apply(null, args);\n            return ctx;\n        }\n        else if (typeof (eventName) === 'string') {\n            // Return interface allowing to fire or unsubscribe from event\n            return evs[eventName];\n        }\n    };\n    rv.addEventType = add;\n    for (var i = 1, l = arguments.length; i < l; ++i) {\n        add(arguments[i]);\n    }\n    return rv;\n    function add(eventName, chainFunction, defaultFunction) {\n        if (typeof eventName === 'object')\n            return addConfiguredEvents(eventName);\n        if (!chainFunction)\n            chainFunction = reverseStoppableEventChain;\n        if (!defaultFunction)\n            defaultFunction = nop;\n        var context = {\n            subscribers: [],\n            fire: defaultFunction,\n            subscribe: function (cb) {\n                if (context.subscribers.indexOf(cb) === -1) {\n                    context.subscribers.push(cb);\n                    context.fire = chainFunction(context.fire, cb);\n                }\n            },\n            unsubscribe: function (cb) {\n                context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });\n                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);\n            }\n        };\n        evs[eventName] = rv[eventName] = context;\n        return context;\n    }\n    function addConfiguredEvents(cfg) {\n        // events(this, {reading: [functionChain, nop]});\n        keys(cfg).forEach(function (eventName) {\n            var args = cfg[eventName];\n            if (isArray(args)) {\n                add(eventName, cfg[eventName][0], cfg[eventName][1]);\n            }\n            else if (args === 'asap') {\n                // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack\n                // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.\n                var context = add(eventName, mirror, function fire() {\n                    // Optimazation-safe cloning of arguments into args.\n                    var i = arguments.length, args = new Array(i);\n                    while (i--)\n                        args[i] = arguments[i];\n                    // All each subscriber:\n                    context.subscribers.forEach(function (fn) {\n                        asap(function fireEvent() {\n                            fn.apply(null, args);\n                        });\n                    });\n                });\n            }\n            else\n                throw new exceptions.InvalidArgument(\"Invalid event config\");\n        });\n    }\n}\n\n/*\n * Dexie.js - a minimalistic wrapper for IndexedDB\n * ===============================================\n *\n * Copyright (c) 2014-2017 David Fahlander\n *\n * Version 2.0.4, Fri May 25 2018\n *\n * http://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/LICENSE-2.0\n *\n */\nvar DEXIE_VERSION = '2.0.4';\nvar maxString = String.fromCharCode(65535);\nvar maxKey = (function () { try {\n    IDBKeyRange.only([[]]);\n    return [[]];\n}\ncatch (e) {\n    return maxString;\n} })();\nvar minKey = -Infinity;\nvar INVALID_KEY_ARGUMENT = \"Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.\";\nvar STRING_EXPECTED = \"String expected.\";\nvar connections = [];\nvar isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);\nvar hasIEDeleteObjectStoreBug = isIEOrEdge;\nvar hangsOnDeleteLargeKeyRange = isIEOrEdge;\nvar dexieStackFrameFilter = function (frame) { return !/(dexie\\.js|dexie\\.min\\.js)/.test(frame); };\nvar dbNamesDB; // Global database for backing Dexie.getDatabaseNames() on browser without indexedDB.webkitGetDatabaseNames() \n// Init debug\nsetDebug(debug, dexieStackFrameFilter);\nfunction Dexie(dbName, options) {\n    /// <param name=\"options\" type=\"Object\" optional=\"true\">Specify only if you wich to control which addons that should run on this instance</param>\n    var deps = Dexie.dependencies;\n    var opts = extend({\n        // Default Options\n        addons: Dexie.addons,\n        autoOpen: true,\n        indexedDB: deps.indexedDB,\n        IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to browser env.\n    }, options);\n    var addons = opts.addons, autoOpen = opts.autoOpen, indexedDB = opts.indexedDB, IDBKeyRange = opts.IDBKeyRange;\n    var globalSchema = this._dbSchema = {};\n    var versions = [];\n    var dbStoreNames = [];\n    var allTables = {};\n    ///<var type=\"IDBDatabase\" />\n    var idbdb = null; // Instance of IDBDatabase\n    var dbOpenError = null;\n    var isBeingOpened = false;\n    var onReadyBeingFired = null;\n    var openComplete = false;\n    var READONLY = \"readonly\", READWRITE = \"readwrite\";\n    var db = this;\n    var dbReadyResolve, dbReadyPromise = new Promise(function (resolve) {\n        dbReadyResolve = resolve;\n    }), cancelOpen, openCanceller = new Promise(function (_, reject) {\n        cancelOpen = reject;\n    });\n    var autoSchema = true;\n    var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB), hasGetAll;\n    function init() {\n        // Default subscribers to \"versionchange\" and \"blocked\".\n        // Can be overridden by custom handlers. If custom handlers return false, these default\n        // behaviours will be prevented.\n        db.on(\"versionchange\", function (ev) {\n            // Default behavior for versionchange event is to close database connection.\n            // Caller can override this behavior by doing db.on(\"versionchange\", function(){ return false; });\n            // Let's not block the other window from making it's delete() or open() call.\n            // NOTE! This event is never fired in IE,Edge or Safari.\n            if (ev.newVersion > 0)\n                console.warn(\"Another connection wants to upgrade database '\" + db.name + \"'. Closing db now to resume the upgrade.\");\n            else\n                console.warn(\"Another connection wants to delete database '\" + db.name + \"'. Closing db now to resume the delete request.\");\n            db.close();\n            // In many web applications, it would be recommended to force window.reload()\n            // when this event occurs. To do that, subscribe to the versionchange event\n            // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)\n            // The reason for this is that your current web app obviously has old schema code that needs\n            // to be updated. Another window got a newer version of the app and needs to upgrade DB but\n            // your window is blocking it unless we close it here.\n        });\n        db.on(\"blocked\", function (ev) {\n            if (!ev.newVersion || ev.newVersion < ev.oldVersion)\n                console.warn(\"Dexie.delete('\" + db.name + \"') was blocked\");\n            else\n                console.warn(\"Upgrade '\" + db.name + \"' blocked by other connection holding version \" + ev.oldVersion / 10);\n        });\n    }\n    //\n    //\n    //\n    // ------------------------- Versioning Framework---------------------------\n    //\n    //\n    //\n    this.version = function (versionNumber) {\n        /// <param name=\"versionNumber\" type=\"Number\"></param>\n        /// <returns type=\"Version\"></returns>\n        if (idbdb || isBeingOpened)\n            throw new exceptions.Schema(\"Cannot add version when database is open\");\n        this.verno = Math.max(this.verno, versionNumber);\n        var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];\n        if (versionInstance)\n            return versionInstance;\n        versionInstance = new Version(versionNumber);\n        versions.push(versionInstance);\n        versions.sort(lowerVersionFirst);\n        // Disable autoschema mode, as at least one version is specified.\n        autoSchema = false;\n        return versionInstance;\n    };\n    function Version(versionNumber) {\n        this._cfg = {\n            version: versionNumber,\n            storesSource: null,\n            dbschema: {},\n            tables: {},\n            contentUpgrade: null\n        };\n        this.stores({}); // Derive earlier schemas by default.\n    }\n    extend(Version.prototype, {\n        stores: function (stores) {\n            /// <summary>\n            ///   Defines the schema for a particular version\n            /// </summary>\n            /// <param name=\"stores\" type=\"Object\">\n            /// Example: <br/>\n            ///   {users: \"id++,first,last,&amp;username,*email\", <br/>\n            ///   passwords: \"id++,&amp;username\"}<br/>\n            /// <br/>\n            /// Syntax: {Table: \"[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,...\"}<br/><br/>\n            /// Special characters:<br/>\n            ///  \"&amp;\"  means unique key, <br/>\n            ///  \"*\"  means value is multiEntry, <br/>\n            ///  \"++\" means auto-increment and only applicable for primary key <br/>\n            /// </param>\n            this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;\n            // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.\n            var storesSpec = {};\n            versions.forEach(function (version) {\n                extend(storesSpec, version._cfg.storesSource);\n            });\n            var dbschema = (this._cfg.dbschema = {});\n            this._parseStoresSpec(storesSpec, dbschema);\n            // Update the latest schema to this version\n            // Update API\n            globalSchema = db._dbSchema = dbschema;\n            removeTablesApi([allTables, db, Transaction.prototype]); // Keep Transaction.prototype even though it should be depr.\n            setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);\n            dbStoreNames = keys(dbschema);\n            return this;\n        },\n        upgrade: function (upgradeFunction) {\n            this._cfg.contentUpgrade = upgradeFunction;\n            return this;\n        },\n        _parseStoresSpec: function (stores, outSchema) {\n            keys(stores).forEach(function (tableName) {\n                if (stores[tableName] !== null) {\n                    var instanceTemplate = {};\n                    var indexes = parseIndexSyntax(stores[tableName]);\n                    var primKey = indexes.shift();\n                    if (primKey.multi)\n                        throw new exceptions.Schema(\"Primary key cannot be multi-valued\");\n                    if (primKey.keyPath)\n                        setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);\n                    indexes.forEach(function (idx) {\n                        if (idx.auto)\n                            throw new exceptions.Schema(\"Only primary key can be marked as autoIncrement (++)\");\n                        if (!idx.keyPath)\n                            throw new exceptions.Schema(\"Index must have a name and cannot be an empty string\");\n                        setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () { return \"\"; }) : \"\");\n                    });\n                    outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);\n                }\n            });\n        }\n    });\n    function runUpgraders(oldVersion, idbtrans, reject) {\n        var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);\n        trans.create(idbtrans);\n        trans._completion.catch(reject);\n        var rejectTransaction = trans._reject.bind(trans);\n        newScope(function () {\n            PSD.trans = trans;\n            if (oldVersion === 0) {\n                // Create tables:\n                keys(globalSchema).forEach(function (tableName) {\n                    createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);\n                });\n                Promise.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);\n            }\n            else\n                updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);\n        });\n    }\n    function updateTablesAndIndexes(oldVersion, trans, idbtrans) {\n        // Upgrade version to version, step-by-step from oldest to newest version.\n        // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)\n        var queue = [];\n        var oldVersionStruct = versions.filter(function (version) { return version._cfg.version === oldVersion; })[0];\n        if (!oldVersionStruct)\n            throw new exceptions.Upgrade(\"Dexie specification of currently installed DB version is missing\");\n        globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;\n        var anyContentUpgraderHasRun = false;\n        var versToRun = versions.filter(function (v) { return v._cfg.version > oldVersion; });\n        versToRun.forEach(function (version) {\n            /// <param name=\"version\" type=\"Version\"></param>\n            queue.push(function () {\n                var oldSchema = globalSchema;\n                var newSchema = version._cfg.dbschema;\n                adjustToExistingIndexNames(oldSchema, idbtrans);\n                adjustToExistingIndexNames(newSchema, idbtrans);\n                globalSchema = db._dbSchema = newSchema;\n                var diff = getSchemaDiff(oldSchema, newSchema);\n                // Add tables           \n                diff.add.forEach(function (tuple) {\n                    createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);\n                });\n                // Change tables\n                diff.change.forEach(function (change) {\n                    if (change.recreate) {\n                        throw new exceptions.Upgrade(\"Not yet support for changing primary key\");\n                    }\n                    else {\n                        var store = idbtrans.objectStore(change.name);\n                        // Add indexes\n                        change.add.forEach(function (idx) {\n                            addIndex(store, idx);\n                        });\n                        // Update indexes\n                        change.change.forEach(function (idx) {\n                            store.deleteIndex(idx.name);\n                            addIndex(store, idx);\n                        });\n                        // Delete indexes\n                        change.del.forEach(function (idxName) {\n                            store.deleteIndex(idxName);\n                        });\n                    }\n                });\n                if (version._cfg.contentUpgrade) {\n                    anyContentUpgraderHasRun = true;\n                    return Promise.follow(function () {\n                        version._cfg.contentUpgrade(trans);\n                    });\n                }\n            });\n            queue.push(function (idbtrans) {\n                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {\n                    var newSchema = version._cfg.dbschema;\n                    // Delete old tables\n                    deleteRemovedTables(newSchema, idbtrans);\n                }\n            });\n        });\n        // Now, create a queue execution engine\n        function runQueue() {\n            return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :\n                Promise.resolve();\n        }\n        return runQueue().then(function () {\n            createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)\n        });\n    }\n    function getSchemaDiff(oldSchema, newSchema) {\n        var diff = {\n            del: [],\n            add: [],\n            change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}\n        };\n        for (var table in oldSchema) {\n            if (!newSchema[table])\n                diff.del.push(table);\n        }\n        for (table in newSchema) {\n            var oldDef = oldSchema[table], newDef = newSchema[table];\n            if (!oldDef) {\n                diff.add.push([table, newDef]);\n            }\n            else {\n                var change = {\n                    name: table,\n                    def: newDef,\n                    recreate: false,\n                    del: [],\n                    add: [],\n                    change: []\n                };\n                if (oldDef.primKey.src !== newDef.primKey.src) {\n                    // Primary key has changed. Remove and re-add table.\n                    change.recreate = true;\n                    diff.change.push(change);\n                }\n                else {\n                    // Same primary key. Just find out what differs:\n                    var oldIndexes = oldDef.idxByName;\n                    var newIndexes = newDef.idxByName;\n                    for (var idxName in oldIndexes) {\n                        if (!newIndexes[idxName])\n                            change.del.push(idxName);\n                    }\n                    for (idxName in newIndexes) {\n                        var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];\n                        if (!oldIdx)\n                            change.add.push(newIdx);\n                        else if (oldIdx.src !== newIdx.src)\n                            change.change.push(newIdx);\n                    }\n                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {\n                        diff.change.push(change);\n                    }\n                }\n            }\n        }\n        return diff;\n    }\n    function createTable(idbtrans, tableName, primKey, indexes) {\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\n        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });\n        indexes.forEach(function (idx) { addIndex(store, idx); });\n        return store;\n    }\n    function createMissingTables(newSchema, idbtrans) {\n        keys(newSchema).forEach(function (tableName) {\n            if (!idbtrans.db.objectStoreNames.contains(tableName)) {\n                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);\n            }\n        });\n    }\n    function deleteRemovedTables(newSchema, idbtrans) {\n        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {\n            var storeName = idbtrans.db.objectStoreNames[i];\n            if (newSchema[storeName] == null) {\n                idbtrans.db.deleteObjectStore(storeName);\n            }\n        }\n    }\n    function addIndex(store, idx) {\n        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });\n    }\n    //\n    //\n    //      Dexie Protected API\n    //\n    //\n    this._allTables = allTables;\n    this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {\n        return new Transaction(mode, storeNames, dbschema, parentTransaction);\n    };\n    /* Generate a temporary transaction when db operations are done outside a transaction scope.\n    */\n    function tempTransaction(mode, storeNames, fn) {\n        if (!openComplete && (!PSD.letThrough)) {\n            if (!isBeingOpened) {\n                if (!autoOpen)\n                    return rejection(new exceptions.DatabaseClosed());\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            return dbReadyPromise.then(function () { return tempTransaction(mode, storeNames, fn); });\n        }\n        else {\n            var trans = db._createTransaction(mode, storeNames, globalSchema);\n            try {\n                trans.create();\n            }\n            catch (ex) {\n                return rejection(ex);\n            }\n            return trans._promise(mode, function (resolve, reject) {\n                return newScope(function () {\n                    PSD.trans = trans;\n                    return fn(resolve, reject, trans);\n                });\n            }).then(function (result) {\n                // Instead of resolving value directly, wait with resolving it until transaction has completed.\n                // Otherwise the data would not be in the DB if requesting it in the then() operation.\n                // Specifically, to ensure that the following expression will work:\n                //\n                //   db.friends.put({name: \"Arne\"}).then(function () {\n                //       db.friends.where(\"name\").equals(\"Arne\").count(function(count) {\n                //           assert (count === 1);\n                //       });\n                //   });\n                //\n                return trans._completion.then(function () { return result; });\n            }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.\n                trans._reject(err);\n                return rejection(err);\n            });*/\n        }\n    }\n    this._whenReady = function (fn) {\n        return openComplete || PSD.letThrough ? fn() : new Promise(function (resolve, reject) {\n            if (!isBeingOpened) {\n                if (!autoOpen) {\n                    reject(new exceptions.DatabaseClosed());\n                    return;\n                }\n                db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.\n            }\n            dbReadyPromise.then(resolve, reject);\n        }).then(fn);\n    };\n    //\n    //\n    //\n    //\n    //      Dexie API\n    //\n    //\n    //\n    this.verno = 0;\n    this.open = function () {\n        if (isBeingOpened || idbdb)\n            return dbReadyPromise.then(function () { return dbOpenError ? rejection(dbOpenError) : db; });\n        debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.\n        isBeingOpened = true;\n        dbOpenError = null;\n        openComplete = false;\n        // Function pointers to call when the core opening process completes.\n        var resolveDbReady = dbReadyResolve, \n        // upgradeTransaction to abort on failure.\n        upgradeTransaction = null;\n        return Promise.race([openCanceller, new Promise(function (resolve, reject) {\n                // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:\n                // IE fails when deleting objectStore after reading from it.\n                // A future version of Dexie.js will stopover an intermediate version to workaround this.\n                // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.\n                // If no API, throw!\n                if (!indexedDB)\n                    throw new exceptions.MissingAPI(\"indexedDB API not found. If using IE10+, make sure to run your code on a server URL \" +\n                        \"(not locally). If using old Safari versions, make sure to include indexedDB polyfill.\");\n                var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));\n                if (!req)\n                    throw new exceptions.MissingAPI(\"IndexedDB API not available\"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134\n                req.onerror = eventRejectHandler(reject);\n                req.onblocked = wrap(fireOnBlocked);\n                req.onupgradeneeded = wrap(function (e) {\n                    upgradeTransaction = req.transaction;\n                    if (autoSchema && !db._allowEmptyDB) {\n                        // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.\n                        // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we\n                        // do not create a new database by accident here.\n                        req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!\n                        upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)\n                        // Close database and delete it.\n                        req.result.close();\n                        var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!\n                        delreq.onsuccess = delreq.onerror = wrap(function () {\n                            reject(new exceptions.NoSuchDatabase(\"Database \" + dbName + \" doesnt exist\"));\n                        });\n                    }\n                    else {\n                        upgradeTransaction.onerror = eventRejectHandler(reject);\n                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.\n                        runUpgraders(oldVer / 10, upgradeTransaction, reject, req);\n                    }\n                }, reject);\n                req.onsuccess = wrap(function () {\n                    // Core opening procedure complete. Now let's just record some stuff.\n                    upgradeTransaction = null;\n                    idbdb = req.result;\n                    connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.\n                    if (autoSchema)\n                        readGlobalSchema();\n                    else if (idbdb.objectStoreNames.length > 0) {\n                        try {\n                            adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));\n                        }\n                        catch (e) {\n                            // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.\n                        }\n                    }\n                    idbdb.onversionchange = wrap(function (ev) {\n                        db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)\n                        db.on(\"versionchange\").fire(ev);\n                    });\n                    if (!hasNativeGetDatabaseNames && dbName !== '__dbnames') {\n                        dbNamesDB.dbnames.put({ name: dbName }).catch(nop);\n                    }\n                    resolve();\n                }, reject);\n            })]).then(function () {\n            // Before finally resolving the dbReadyPromise and this promise,\n            // call and await all on('ready') subscribers:\n            // Dexie.vip() makes subscribers able to use the database while being opened.\n            // This is a must since these subscribers take part of the opening procedure.\n            onReadyBeingFired = [];\n            return Promise.resolve(Dexie.vip(db.on.ready.fire)).then(function fireRemainders() {\n                if (onReadyBeingFired.length > 0) {\n                    // In case additional subscribers to db.on('ready') were added during the time db.on.ready.fire was executed.\n                    var remainders = onReadyBeingFired.reduce(promisableChain, nop);\n                    onReadyBeingFired = [];\n                    return Promise.resolve(Dexie.vip(remainders)).then(fireRemainders);\n                }\n            });\n        }).finally(function () {\n            onReadyBeingFired = null;\n        }).then(function () {\n            // Resolve the db.open() with the db instance.\n            isBeingOpened = false;\n            return db;\n        }).catch(function (err) {\n            try {\n                // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.\n                upgradeTransaction && upgradeTransaction.abort();\n            }\n            catch (e) { }\n            isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).\n            db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.\n            // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.\n            dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.\n            return rejection(dbOpenError);\n        }).finally(function () {\n            openComplete = true;\n            resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.\n        });\n    };\n    this.close = function () {\n        var idx = connections.indexOf(db);\n        if (idx >= 0)\n            connections.splice(idx, 1);\n        if (idbdb) {\n            try {\n                idbdb.close();\n            }\n            catch (e) { }\n            idbdb = null;\n        }\n        autoOpen = false;\n        dbOpenError = new exceptions.DatabaseClosed();\n        if (isBeingOpened)\n            cancelOpen(dbOpenError);\n        // Reset dbReadyPromise promise:\n        dbReadyPromise = new Promise(function (resolve) {\n            dbReadyResolve = resolve;\n        });\n        openCanceller = new Promise(function (_, reject) {\n            cancelOpen = reject;\n        });\n    };\n    this.delete = function () {\n        var hasArguments = arguments.length > 0;\n        return new Promise(function (resolve, reject) {\n            if (hasArguments)\n                throw new exceptions.InvalidArgument(\"Arguments not allowed in db.delete()\");\n            if (isBeingOpened) {\n                dbReadyPromise.then(doDelete);\n            }\n            else {\n                doDelete();\n            }\n            function doDelete() {\n                db.close();\n                var req = indexedDB.deleteDatabase(dbName);\n                req.onsuccess = wrap(function () {\n                    if (!hasNativeGetDatabaseNames) {\n                        dbNamesDB.dbnames.delete(dbName).catch(nop);\n                    }\n                    resolve();\n                });\n                req.onerror = eventRejectHandler(reject);\n                req.onblocked = fireOnBlocked;\n            }\n        });\n    };\n    this.backendDB = function () {\n        return idbdb;\n    };\n    this.isOpen = function () {\n        return idbdb !== null;\n    };\n    this.hasBeenClosed = function () {\n        return dbOpenError && (dbOpenError instanceof exceptions.DatabaseClosed);\n    };\n    this.hasFailed = function () {\n        return dbOpenError !== null;\n    };\n    this.dynamicallyOpened = function () {\n        return autoSchema;\n    };\n    //\n    // Properties\n    //\n    this.name = dbName;\n    // db.tables - an array of all Table instances.\n    props(this, {\n        tables: {\n            get: function () {\n                /// <returns type=\"Array\" elementType=\"Table\" />\n                return keys(allTables).map(function (name) { return allTables[name]; });\n            }\n        }\n    });\n    //\n    // Events\n    //\n    this.on = Events(this, \"populate\", \"blocked\", \"versionchange\", { ready: [promisableChain, nop] });\n    this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {\n        return function (subscriber, bSticky) {\n            Dexie.vip(function () {\n                if (openComplete) {\n                    // Database already open. Call subscriber asap.\n                    if (!dbOpenError)\n                        Promise.resolve().then(subscriber);\n                    // bSticky: Also subscribe to future open sucesses (after close / reopen) \n                    if (bSticky)\n                        subscribe(subscriber);\n                }\n                else if (onReadyBeingFired) {\n                    // db.on('ready') subscribers are currently being executed and have not yet resolved or rejected\n                    onReadyBeingFired.push(subscriber);\n                    if (bSticky)\n                        subscribe(subscriber);\n                }\n                else {\n                    // Database not yet open. Subscribe to it.\n                    subscribe(subscriber);\n                    // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.\n                    if (!bSticky)\n                        subscribe(function unsubscribe() {\n                            db.on.ready.unsubscribe(subscriber);\n                            db.on.ready.unsubscribe(unsubscribe);\n                        });\n                }\n            });\n        };\n    });\n    this.transaction = function () {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"mode\" type=\"String\">\"r\" for readonly, or \"rw\" for readwrite</param>\n        /// <param name=\"tableInstances\">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>\n        /// <param name=\"scopeFunc\" type=\"Function\">Function to execute with transaction</param>\n        var args = extractTransactionArgs.apply(this, arguments);\n        return this._transaction.apply(this, args);\n    };\n    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {\n        // Let table arguments be all arguments between mode and last argument.\n        var i = arguments.length;\n        if (i < 2)\n            throw new exceptions.InvalidArgument(\"Too few arguments\");\n        // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)\n        // and clone arguments except the first one into local var 'args'.\n        var args = new Array(i - 1);\n        while (--i)\n            args[i - 1] = arguments[i];\n        // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.\n        scopeFunc = args.pop();\n        var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.\n        return [mode, tables, scopeFunc];\n    }\n    this._transaction = function (mode, tables, scopeFunc) {\n        var parentTransaction = PSD.trans;\n        // Check if parent transactions is bound to this db instance, and if caller wants to reuse it\n        if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1)\n            parentTransaction = null;\n        var onlyIfCompatible = mode.indexOf('?') !== -1;\n        mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.\n        try {\n            //\n            // Get storeNames from arguments. Either through given table instances, or through given table names.\n            //\n            var storeNames = tables.map(function (table) {\n                var storeName = table instanceof Table ? table.name : table;\n                if (typeof storeName !== 'string')\n                    throw new TypeError(\"Invalid table argument to Dexie.transaction(). Only Table or String are allowed\");\n                return storeName;\n            });\n            //\n            // Resolve mode. Allow shortcuts \"r\" and \"rw\".\n            //\n            if (mode == \"r\" || mode == READONLY)\n                mode = READONLY;\n            else if (mode == \"rw\" || mode == READWRITE)\n                mode = READWRITE;\n            else\n                throw new exceptions.InvalidArgument(\"Invalid transaction mode: \" + mode);\n            if (parentTransaction) {\n                // Basic checks\n                if (parentTransaction.mode === READONLY && mode === READWRITE) {\n                    if (onlyIfCompatible) {\n                        // Spawn new transaction instead.\n                        parentTransaction = null;\n                    }\n                    else\n                        throw new exceptions.SubTransaction(\"Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY\");\n                }\n                if (parentTransaction) {\n                    storeNames.forEach(function (storeName) {\n                        if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {\n                            if (onlyIfCompatible) {\n                                // Spawn new transaction instead.\n                                parentTransaction = null;\n                            }\n                            else\n                                throw new exceptions.SubTransaction(\"Table \" + storeName +\n                                    \" not included in parent transaction.\");\n                        }\n                    });\n                }\n                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {\n                    // '?' mode should not keep using an inactive transaction.\n                    parentTransaction = null;\n                }\n            }\n        }\n        catch (e) {\n            return parentTransaction ?\n                parentTransaction._promise(null, function (_, reject) { reject(e); }) :\n                rejection(e);\n        }\n        // If this is a sub-transaction, lock the parent and then launch the sub-transaction.\n        return (parentTransaction ?\n            parentTransaction._promise(mode, enterTransactionScope, \"lock\") :\n            PSD.trans ?\n                // no parent transaction despite PSD.trans exists. Make sure also\n                // that the zone we create is not a sub-zone of current, because\n                // Promise.follow() should not wait for it if so.\n                usePSD(PSD.transless, function () { return db._whenReady(enterTransactionScope); }) :\n                db._whenReady(enterTransactionScope));\n        function enterTransactionScope() {\n            return Promise.resolve().then(function () {\n                // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().\n                var transless = PSD.transless || PSD;\n                // Our transaction.\n                //return new Promise((resolve, reject) => {\n                var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);\n                // Let the transaction instance be part of a Promise-specific data (PSD) value.\n                var zoneProps = {\n                    trans: trans,\n                    transless: transless\n                };\n                if (parentTransaction) {\n                    // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)\n                    trans.idbtrans = parentTransaction.idbtrans;\n                }\n                else {\n                    trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.\n                }\n                // Support for native async await.\n                if (scopeFunc.constructor === AsyncFunction) {\n                    incrementExpectedAwaits();\n                }\n                var returnValue;\n                var promiseFollowed = Promise.follow(function () {\n                    // Finally, call the scope function with our table and transaction arguments.\n                    returnValue = scopeFunc.call(trans, trans);\n                    if (returnValue) {\n                        if (returnValue.constructor === NativePromise) {\n                            var decrementor = decrementExpectedAwaits.bind(null, null);\n                            returnValue.then(decrementor, decrementor);\n                        }\n                        else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {\n                            // scopeFunc returned an iterator with throw-support. Handle yield as await.\n                            returnValue = awaitIterator(returnValue);\n                        }\n                    }\n                }, zoneProps);\n                return (returnValue && typeof returnValue.then === 'function' ?\n                    // Promise returned. User uses promise-style transactions.\n                    Promise.resolve(returnValue).then(function (x) { return trans.active ?\n                        x // Transaction still active. Continue.\n                        : rejection(new exceptions.PrematureCommit(\"Transaction committed too early. See http://bit.ly/2kdckMn\")); })\n                    // No promise returned. Wait for all outstanding promises before continuing. \n                    : promiseFollowed.then(function () { return returnValue; })).then(function (x) {\n                    // sub transactions don't react to idbtrans.oncomplete. We must trigger a completion:\n                    if (parentTransaction)\n                        trans._resolve();\n                    // wait for trans._completion\n                    // (if root transaction, this means 'complete' event. If sub-transaction, we've just fired it ourselves)\n                    return trans._completion.then(function () { return x; });\n                }).catch(function (e) {\n                    trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!\n                    return rejection(e);\n                });\n            });\n        }\n    };\n    this.table = function (tableName) {\n        /// <returns type=\"Table\"></returns>\n        if (!hasOwn(allTables, tableName)) {\n            throw new exceptions.InvalidTable(\"Table \" + tableName + \" does not exist\");\n        }\n        return allTables[tableName];\n    };\n    //\n    //\n    //\n    // Table Class\n    //\n    //\n    //\n    function Table(name, tableSchema, optionalTrans) {\n        /// <param name=\"name\" type=\"String\"></param>\n        this.name = name;\n        this.schema = tableSchema;\n        this._tx = optionalTrans;\n        this.hook = allTables[name] ? allTables[name].hook : Events(null, {\n            \"creating\": [hookCreatingChain, nop],\n            \"reading\": [pureFunctionChain, mirror],\n            \"updating\": [hookUpdatingChain, nop],\n            \"deleting\": [hookDeletingChain, nop]\n        });\n    }\n    function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {\n        return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {\n            errorList.push(e);\n            done && done();\n        });\n    }\n    function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {\n        // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],\n        // else keysOrTuples must be just an array of keys: [key1, key2, ...].\n        return new Promise(function (resolve, reject) {\n            var len = keysOrTuples.length, lastItem = len - 1;\n            if (len === 0)\n                return resolve();\n            if (!hasDeleteHook) {\n                for (var i = 0; i < len; ++i) {\n                    var req = idbstore.delete(keysOrTuples[i]);\n                    req.onerror = eventRejectHandler(reject);\n                    if (i === lastItem)\n                        req.onsuccess = wrap(function () { return resolve(); });\n                }\n            }\n            else {\n                var hookCtx, errorHandler = hookedEventRejectHandler(reject), successHandler = hookedEventSuccessHandler(null);\n                tryCatch(function () {\n                    for (var i = 0; i < len; ++i) {\n                        hookCtx = { onsuccess: null, onerror: null };\n                        var tuple = keysOrTuples[i];\n                        deletingHook.call(hookCtx, tuple[0], tuple[1], trans);\n                        var req = idbstore.delete(tuple[0]);\n                        req._hookCtx = hookCtx;\n                        req.onerror = errorHandler;\n                        if (i === lastItem)\n                            req.onsuccess = hookedEventSuccessHandler(resolve);\n                        else\n                            req.onsuccess = successHandler;\n                    }\n                }, function (err) {\n                    hookCtx.onerror && hookCtx.onerror(err);\n                    throw err;\n                });\n            }\n        });\n    }\n    props(Table.prototype, {\n        //\n        // Table Protected Methods\n        //\n        _trans: function getTransaction(mode, fn, writeLocked) {\n            var trans = this._tx || PSD.trans;\n            return trans && trans.db === db ?\n                trans === PSD.trans ?\n                    trans._promise(mode, fn, writeLocked) :\n                    newScope(function () { return trans._promise(mode, fn, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :\n                tempTransaction(mode, [this.name], fn);\n        },\n        _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {\n            var tableName = this.name;\n            function supplyIdbStore(resolve, reject, trans) {\n                if (trans.storeNames.indexOf(tableName) === -1)\n                    throw new exceptions.NotFound(\"Table\" + tableName + \" not part of transaction\");\n                return fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);\n            }\n            return this._trans(mode, supplyIdbStore, writeLocked);\n        },\n        //\n        // Table Public Methods\n        //\n        get: function (keyOrCrit, cb) {\n            if (keyOrCrit && keyOrCrit.constructor === Object)\n                return this.where(keyOrCrit).first(cb);\n            var self = this;\n            return this._idbstore(READONLY, function (resolve, reject, idbstore) {\n                var req = idbstore.get(keyOrCrit);\n                req.onerror = eventRejectHandler(reject);\n                req.onsuccess = wrap(function () {\n                    resolve(self.hook.reading.fire(req.result));\n                }, reject);\n            }).then(cb);\n        },\n        where: function (indexOrCrit) {\n            if (typeof indexOrCrit === 'string')\n                return new WhereClause(this, indexOrCrit);\n            if (isArray(indexOrCrit))\n                return new WhereClause(this, \"[\" + indexOrCrit.join('+') + \"]\");\n            // indexOrCrit is an object map of {[keyPath]:value} \n            var keyPaths = keys(indexOrCrit);\n            if (keyPaths.length === 1)\n                // Only one critera. This was the easy case:\n                return this\n                    .where(keyPaths[0])\n                    .equals(indexOrCrit[keyPaths[0]]);\n            // Multiple criterias.\n            // Let's try finding a compound index that matches all keyPaths in\n            // arbritary order:\n            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {\n                return ix.compound &&\n                    keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; }) &&\n                    ix.keyPath.every(function (keyPath) { return keyPaths.indexOf(keyPath) >= 0; });\n            })[0];\n            if (compoundIndex && maxKey !== maxString)\n                // Cool! We found such compound index\n                // and this browser supports compound indexes (maxKey !== maxString)!\n                return this\n                    .where(compoundIndex.name)\n                    .equals(compoundIndex.keyPath.map(function (kp) { return indexOrCrit[kp]; }));\n            if (!compoundIndex)\n                console.warn(\"The query \" + JSON.stringify(indexOrCrit) + \" on \" + this.name + \" would benefit of a \" +\n                    (\"compound index [\" + keyPaths.join('+') + \"]\"));\n            // Ok, now let's fallback to finding at least one matching index\n            // and filter the rest.\n            var idxByName = this.schema.idxByName;\n            var simpleIndex = keyPaths.reduce(function (r, keyPath) { return [\n                r[0] || idxByName[keyPath],\n                r[0] || !idxByName[keyPath] ?\n                    combine(r[1], function (x) { return '' + getByKeyPath(x, keyPath) ==\n                        '' + indexOrCrit[keyPath]; })\n                    : r[1]\n            ]; }, [null, null]);\n            var idx = simpleIndex[0];\n            return idx ?\n                this.where(idx.name).equals(indexOrCrit[idx.keyPath])\n                    .filter(simpleIndex[1]) :\n                compoundIndex ?\n                    this.filter(simpleIndex[1]) : // Has compound but browser bad. Allow filter.\n                    this.where(keyPaths).equals(''); // No index at all. Fail lazily.\n        },\n        count: function (cb) {\n            return this.toCollection().count(cb);\n        },\n        offset: function (offset) {\n            return this.toCollection().offset(offset);\n        },\n        limit: function (numRows) {\n            return this.toCollection().limit(numRows);\n        },\n        reverse: function () {\n            return this.toCollection().reverse();\n        },\n        filter: function (filterFunction) {\n            return this.toCollection().and(filterFunction);\n        },\n        each: function (fn) {\n            return this.toCollection().each(fn);\n        },\n        toArray: function (cb) {\n            return this.toCollection().toArray(cb);\n        },\n        orderBy: function (index) {\n            return new Collection(new WhereClause(this, isArray(index) ?\n                \"[\" + index.join('+') + \"]\" :\n                index));\n        },\n        toCollection: function () {\n            return new Collection(new WhereClause(this));\n        },\n        mapToClass: function (constructor, structure) {\n            /// <summary>\n            ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making\n            ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.\n            /// </summary>\n            /// <param name=\"constructor\">Constructor function representing the class.</param>\n            /// <param name=\"structure\" optional=\"true\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>\n            this.schema.mappedClass = constructor;\n            var instanceTemplate = Object.create(constructor.prototype);\n            if (structure) {\n                // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.\n                applyStructure(instanceTemplate, structure);\n            }\n            this.schema.instanceTemplate = instanceTemplate;\n            // Now, subscribe to the when(\"reading\") event to make all objects that come out from this table inherit from given class\n            // no matter which method to use for reading (Table.get() or Table.where(...)... )\n            var readHook = function (obj) {\n                if (!obj)\n                    return obj; // No valid object. (Value is null). Return as is.\n                // Create a new object that derives from constructor:\n                var res = Object.create(constructor.prototype);\n                // Clone members:\n                for (var m in obj)\n                    if (hasOwn(obj, m))\n                        try {\n                            res[m] = obj[m];\n                        }\n                        catch (_) { }\n                return res;\n            };\n            if (this.schema.readHook) {\n                this.hook.reading.unsubscribe(this.schema.readHook);\n            }\n            this.schema.readHook = readHook;\n            this.hook(\"reading\", readHook);\n            return constructor;\n        },\n        defineClass: function (structure) {\n            /// <summary>\n            ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database\n            ///     as well as making it possible to extend the prototype of the returned constructor function.\n            /// </summary>\n            /// <param name=\"structure\">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also\n            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>\n            return this.mapToClass(Dexie.defineClass(structure), structure);\n        },\n        bulkDelete: function (keys$$1) {\n            if (this.hook.deleting.fire === nop) {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                    resolve(bulkDelete(idbstore, trans, keys$$1, false, nop));\n                });\n            }\n            else {\n                return this\n                    .where(':id')\n                    .anyOf(keys$$1)\n                    .delete()\n                    .then(function () { }); // Resolve with undefined.\n            }\n        },\n        bulkPut: function (objects, keys$$1) {\n            var _this = this;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys$$1)\n                    throw new exceptions.InvalidArgument(\"bulkPut() with non-inbound keys requires keys array in second argument\");\n                if (idbstore.keyPath && keys$$1)\n                    throw new exceptions.InvalidArgument(\"bulkPut(): keys argument invalid on tables with inbound keys\");\n                if (keys$$1 && keys$$1.length !== objects.length)\n                    throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n                if (objects.length === 0)\n                    return resolve(); // Caller provided empty list.\n                var done = function (result) {\n                    if (errorList.length === 0)\n                        resolve(result);\n                    else\n                        reject(new BulkError(_this.name + \".bulkPut(): \" + errorList.length + \" of \" + numObjs + \" operations failed\", errorList));\n                };\n                var req, errorList = [], errorHandler, numObjs = objects.length, table = _this;\n                if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {\n                    //\n                    // Standard Bulk (no 'creating' or 'updating' hooks to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.put(objects[i], keys$$1[i]) : idbstore.put(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                }\n                else {\n                    var effectiveKeys = keys$$1 || idbstore.keyPath && objects.map(function (o) { return getByKeyPath(o, idbstore.keyPath); });\n                    // Generate map of {[key]: object}\n                    var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) { return key != null && [key, objects[i]]; });\n                    var promise = !effectiveKeys ?\n                        // Auto-incremented key-less objects only without any keys argument.\n                        table.bulkAdd(objects) :\n                        // Keys provided. Either as inbound in provided objects, or as a keys argument.\n                        // Begin with updating those that exists in DB:\n                        table.where(':id').anyOf(effectiveKeys.filter(function (key) { return key != null; })).modify(function () {\n                            this.value = objectLookup[this.primKey];\n                            objectLookup[this.primKey] = null; // Mark as \"don't add this\"\n                        }).catch(ModifyError, function (e) {\n                            errorList = e.failures; // No need to concat here. These are the first errors added.\n                        }).then(function () {\n                            // Now, let's examine which items didnt exist so we can add them:\n                            var objsToAdd = [], keysToAdd = keys$$1 && [];\n                            // Iterate backwards. Why? Because if same key was used twice, just add the last one.\n                            for (var i = effectiveKeys.length - 1; i >= 0; --i) {\n                                var key = effectiveKeys[i];\n                                if (key == null || objectLookup[key]) {\n                                    objsToAdd.push(objects[i]);\n                                    keys$$1 && keysToAdd.push(key);\n                                    if (key != null)\n                                        objectLookup[key] = null; // Mark as \"dont add again\"\n                                }\n                            }\n                            // The items are in reverse order so reverse them before adding.\n                            // Could be important in order to get auto-incremented keys the way the caller\n                            // would expect. Could have used unshift instead of push()/reverse(),\n                            // but: http://jsperf.com/unshift-vs-reverse\n                            objsToAdd.reverse();\n                            keys$$1 && keysToAdd.reverse();\n                            return table.bulkAdd(objsToAdd, keysToAdd);\n                        }).then(function (lastAddedKey) {\n                            // Resolve with key of the last object in given arguments to bulkPut():\n                            var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.\n                            return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;\n                        });\n                    promise.then(done).catch(BulkError, function (e) {\n                        // Concat failure from ModifyError and reject using our 'done' method.\n                        errorList = errorList.concat(e.failures);\n                        done();\n                    }).catch(reject);\n                }\n            }, \"locked\"); // If called from transaction scope, lock transaction til all steps are done.\n        },\n        bulkAdd: function (objects, keys$$1) {\n            var self = this, creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                if (!idbstore.keyPath && !self.schema.primKey.auto && !keys$$1)\n                    throw new exceptions.InvalidArgument(\"bulkAdd() with non-inbound keys requires keys array in second argument\");\n                if (idbstore.keyPath && keys$$1)\n                    throw new exceptions.InvalidArgument(\"bulkAdd(): keys argument invalid on tables with inbound keys\");\n                if (keys$$1 && keys$$1.length !== objects.length)\n                    throw new exceptions.InvalidArgument(\"Arguments objects and keys must have the same length\");\n                if (objects.length === 0)\n                    return resolve(); // Caller provided empty list.\n                function done(result) {\n                    if (errorList.length === 0)\n                        resolve(result);\n                    else\n                        reject(new BulkError(self.name + \".bulkAdd(): \" + errorList.length + \" of \" + numObjs + \" operations failed\", errorList));\n                }\n                var req, errorList = [], errorHandler, successHandler, numObjs = objects.length;\n                if (creatingHook !== nop) {\n                    //\n                    // There are subscribers to hook('creating')\n                    // Must behave as documented.\n                    //\n                    var keyPath = idbstore.keyPath, hookCtx;\n                    errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);\n                    successHandler = hookedEventSuccessHandler(null);\n                    tryCatch(function () {\n                        for (var i = 0, l = objects.length; i < l; ++i) {\n                            hookCtx = { onerror: null, onsuccess: null };\n                            var key = keys$$1 && keys$$1[i];\n                            var obj = objects[i], effectiveKey = keys$$1 ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined, keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);\n                            if (effectiveKey == null && keyToUse != null) {\n                                if (keyPath) {\n                                    obj = deepClone(obj);\n                                    setByKeyPath(obj, keyPath, keyToUse);\n                                }\n                                else {\n                                    key = keyToUse;\n                                }\n                            }\n                            req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                            req._hookCtx = hookCtx;\n                            if (i < l - 1) {\n                                req.onerror = errorHandler;\n                                if (hookCtx.onsuccess)\n                                    req.onsuccess = successHandler;\n                            }\n                        }\n                    }, function (err) {\n                        hookCtx.onerror && hookCtx.onerror(err);\n                        throw err;\n                    });\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);\n                    req.onsuccess = hookedEventSuccessHandler(done);\n                }\n                else {\n                    //\n                    // Standard Bulk (no 'creating' hook to care about)\n                    //\n                    errorHandler = BulkErrorHandlerCatchAll(errorList);\n                    for (var i = 0, l = objects.length; i < l; ++i) {\n                        req = keys$$1 ? idbstore.add(objects[i], keys$$1[i]) : idbstore.add(objects[i]);\n                        req.onerror = errorHandler;\n                    }\n                    // Only need to catch success or error on the last operation\n                    // according to the IDB spec.\n                    req.onerror = BulkErrorHandlerCatchAll(errorList, done);\n                    req.onsuccess = eventSuccessHandler(done);\n                }\n            });\n        },\n        add: function (obj, key) {\n            /// <summary>\n            ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.\n            /// </summary>\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert</param>\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\n            var creatingHook = this.hook.creating.fire;\n            return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {\n                var hookCtx = { onsuccess: null, onerror: null };\n                if (creatingHook !== nop) {\n                    var effectiveKey = (key != null) ? key : (idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined);\n                    var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when(\"creating\") to generate the key.\n                    if (effectiveKey == null && keyToUse != null) {\n                        if (idbstore.keyPath)\n                            setByKeyPath(obj, idbstore.keyPath, keyToUse);\n                        else\n                            key = keyToUse;\n                    }\n                }\n                try {\n                    var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);\n                    req._hookCtx = hookCtx;\n                    req.onerror = hookedEventRejectHandler(reject);\n                    req.onsuccess = hookedEventSuccessHandler(function (result) {\n                        // TODO: Remove these two lines in next major release (2.0?)\n                        // It's no good practice to have side effects on provided parameters\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath)\n                            setByKeyPath(obj, keyPath, result);\n                        resolve(result);\n                    });\n                }\n                catch (e) {\n                    if (hookCtx.onerror)\n                        hookCtx.onerror(e);\n                    throw e;\n                }\n            });\n        },\n        put: function (obj, key) {\n            var _this = this;\n            /// <summary>\n            ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.\n            /// </summary>\n            /// <param name=\"obj\" type=\"Object\">A javascript object to insert or update</param>\n            /// <param name=\"key\" optional=\"true\">Primary key</param>\n            var creatingHook = this.hook.creating.fire, updatingHook = this.hook.updating.fire;\n            if (creatingHook !== nop || updatingHook !== nop) {\n                //\n                // People listens to when(\"creating\") or when(\"updating\") events!\n                // We must know whether the put operation results in an CREATE or UPDATE.\n                //\n                var keyPath = this.schema.primKey.keyPath;\n                var effectiveKey = (key !== undefined) ? key : (keyPath && getByKeyPath(obj, keyPath));\n                if (effectiveKey == null)\n                    return this.add(obj);\n                // Since key is optional, make sure we get it from obj if not provided\n                // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().\n                // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.\n                obj = deepClone(obj);\n                return this._trans(READWRITE, function () {\n                    return _this.where(\":id\").equals(effectiveKey).modify(function () {\n                        // Replace extisting value with our object\n                        // CRUD event firing handled in Collection.modify()\n                        this.value = obj;\n                    }).then(function (count) { return count === 0 ? _this.add(obj, key) : effectiveKey; });\n                }, \"locked\"); // Lock needed because operation is splitted into modify() and add().\n            }\n            else {\n                // Use the standard IDB put() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = wrap(function (ev) {\n                        var keyPath = idbstore.keyPath;\n                        if (keyPath)\n                            setByKeyPath(obj, keyPath, ev.target.result);\n                        resolve(req.result);\n                    });\n                });\n            }\n        },\n        'delete': function (key) {\n            /// <param name=\"key\">Primary key of the object to delete</param>\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when(\"deleting\") event. Must implement delete using Collection.delete() that will\n                // call the CRUD event. Only Collection.delete() will know whether an object was actually deleted.\n                return this.where(\":id\").equals(key).delete();\n            }\n            else {\n                // No one listens. Use standard IDB delete() method.\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.delete(key);\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = wrap(function () {\n                        resolve(req.result);\n                    });\n                });\n            }\n        },\n        clear: function () {\n            if (this.hook.deleting.subscribers.length) {\n                // People listens to when(\"deleting\") event. Must implement delete using Collection.delete() that will\n                // call the CRUD event. Only Collection.delete() will knows which objects that are actually deleted.\n                return this.toCollection().delete();\n            }\n            else {\n                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {\n                    var req = idbstore.clear();\n                    req.onerror = eventRejectHandler(reject);\n                    req.onsuccess = wrap(function () {\n                        resolve(req.result);\n                    });\n                });\n            }\n        },\n        update: function (keyOrObject, modifications) {\n            if (typeof modifications !== 'object' || isArray(modifications))\n                throw new exceptions.InvalidArgument(\"Modifications must be an object.\");\n            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {\n                // object to modify. Also modify given object with the modifications:\n                keys(modifications).forEach(function (keyPath) {\n                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);\n                });\n                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);\n                if (key === undefined)\n                    return rejection(new exceptions.InvalidArgument(\"Given object does not contain its primary key\"));\n                return this.where(\":id\").equals(key).modify(modifications);\n            }\n            else {\n                // key to modify\n                return this.where(\":id\").equals(keyOrObject).modify(modifications);\n            }\n        }\n    });\n    //\n    //\n    //\n    // Transaction Class\n    //\n    //\n    //\n    function Transaction(mode, storeNames, dbschema, parent) {\n        var _this = this;\n        /// <summary>\n        ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.\n        /// </summary>\n        /// <param name=\"mode\" type=\"String\">Any of \"readwrite\" or \"readonly\"</param>\n        /// <param name=\"storeNames\" type=\"Array\">Array of table names to operate on</param>\n        this.db = db;\n        this.mode = mode;\n        this.storeNames = storeNames;\n        this.idbtrans = null;\n        this.on = Events(this, \"complete\", \"error\", \"abort\");\n        this.parent = parent || null;\n        this.active = true;\n        this._reculock = 0;\n        this._blockedFuncs = [];\n        this._resolve = null;\n        this._reject = null;\n        this._waitingFor = null;\n        this._waitingQueue = null;\n        this._spinCount = 0; // Just for debugging waitFor()\n        this._completion = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n        this._completion.then(function () {\n            _this.active = false;\n            _this.on.complete.fire();\n        }, function (e) {\n            var wasActive = _this.active;\n            _this.active = false;\n            _this.on.error.fire(e);\n            _this.parent ?\n                _this.parent._reject(e) :\n                wasActive && _this.idbtrans && _this.idbtrans.abort();\n            return rejection(e); // Indicate we actually DO NOT catch this error.\n        });\n    }\n    props(Transaction.prototype, {\n        //\n        // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)\n        //\n        _lock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            // Temporary set all requests into a pending queue if they are called before database is ready.\n            ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)\n            if (this._reculock === 1 && !PSD.global)\n                PSD.lockOwnerFor = this;\n            return this;\n        },\n        _unlock: function () {\n            assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.\n            if (--this._reculock === 0) {\n                if (!PSD.global)\n                    PSD.lockOwnerFor = null;\n                while (this._blockedFuncs.length > 0 && !this._locked()) {\n                    var fnAndPSD = this._blockedFuncs.shift();\n                    try {\n                        usePSD(fnAndPSD[1], fnAndPSD[0]);\n                    }\n                    catch (e) { }\n                }\n            }\n            return this;\n        },\n        _locked: function () {\n            // Checks if any write-lock is applied on this transaction.\n            // To simplify the Dexie API for extension implementations, we support recursive locks.\n            // This is accomplished by using \"Promise Specific Data\" (PSD).\n            // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).\n            // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():\n            //         * callback given to the Promise() constructor  (function (resolve, reject){...})\n            //         * callbacks given to then()/catch()/finally() methods (function (value){...})\n            // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.\n            // Derivation is done so that the inner PSD __proto__ points to the outer PSD.\n            // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.\n            return this._reculock && PSD.lockOwnerFor !== this;\n        },\n        create: function (idbtrans) {\n            var _this = this;\n            if (!this.mode)\n                return this;\n            assert(!this.idbtrans);\n            if (!idbtrans && !idbdb) {\n                switch (dbOpenError && dbOpenError.name) {\n                    case \"DatabaseClosedError\":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.DatabaseClosed(dbOpenError);\n                    case \"MissingAPIError\":\n                        // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()\n                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);\n                    default:\n                        // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!\n                        throw new exceptions.OpenFailed(dbOpenError);\n                }\n            }\n            if (!this.active)\n                throw new exceptions.TransactionInactive();\n            assert(this._completion._state === null);\n            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);\n            idbtrans.onerror = wrap(function (ev) {\n                preventDefault(ev); // Prohibit default bubbling to window.error\n                _this._reject(idbtrans.error);\n            });\n            idbtrans.onabort = wrap(function (ev) {\n                preventDefault(ev);\n                _this.active && _this._reject(new exceptions.Abort(idbtrans.error));\n                _this.active = false;\n                _this.on(\"abort\").fire(ev);\n            });\n            idbtrans.oncomplete = wrap(function () {\n                _this.active = false;\n                _this._resolve();\n            });\n            return this;\n        },\n        _promise: function (mode, fn, bWriteLock) {\n            var _this = this;\n            if (mode === READWRITE && this.mode !== READWRITE)\n                return rejection(new exceptions.ReadOnly(\"Transaction is readonly\"));\n            if (!this.active)\n                return rejection(new exceptions.TransactionInactive());\n            if (this._locked()) {\n                return new Promise(function (resolve, reject) {\n                    _this._blockedFuncs.push([function () {\n                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);\n                        }, PSD]);\n                });\n            }\n            else if (bWriteLock) {\n                return newScope(function () {\n                    var p = new Promise(function (resolve, reject) {\n                        _this._lock();\n                        var rv = fn(resolve, reject, _this);\n                        if (rv && rv.then)\n                            rv.then(resolve, reject);\n                    });\n                    p.finally(function () { return _this._unlock(); });\n                    p._lib = true;\n                    return p;\n                });\n            }\n            else {\n                var p = new Promise(function (resolve, reject) {\n                    var rv = fn(resolve, reject, _this);\n                    if (rv && rv.then)\n                        rv.then(resolve, reject);\n                });\n                p._lib = true;\n                return p;\n            }\n        },\n        _root: function () {\n            return this.parent ? this.parent._root() : this;\n        },\n        waitFor: function (promise) {\n            // Always operate on the root transaction (in case this is a sub stransaction)\n            var root = this._root();\n            // For stability reasons, convert parameter to promise no matter what type is passed to waitFor().\n            // (We must be able to call .then() on it.)\n            promise = Promise.resolve(promise);\n            if (root._waitingFor) {\n                // Already called waitFor(). Wait for both to complete.\n                root._waitingFor = root._waitingFor.then(function () { return promise; });\n            }\n            else {\n                // We're not in waiting state. Start waiting state.\n                root._waitingFor = promise;\n                root._waitingQueue = [];\n                // Start interacting with indexedDB until promise completes:\n                var store = root.idbtrans.objectStore(root.storeNames[0]);\n                (function spin() {\n                    ++root._spinCount; // For debugging only\n                    while (root._waitingQueue.length)\n                        (root._waitingQueue.shift())();\n                    if (root._waitingFor)\n                        store.get(-Infinity).onsuccess = spin;\n                }());\n            }\n            var currentWaitPromise = root._waitingFor;\n            return new Promise(function (resolve, reject) {\n                promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {\n                    if (root._waitingFor === currentWaitPromise) {\n                        // No one added a wait after us. Safe to stop the spinning.\n                        root._waitingFor = null;\n                    }\n                });\n            });\n        },\n        //\n        // Transaction Public Properties and Methods\n        //\n        abort: function () {\n            this.active && this._reject(new exceptions.Abort());\n            this.active = false;\n        },\n        tables: {\n            get: deprecated(\"Transaction.tables\", function () { return allTables; })\n        },\n        table: function (name) {\n            var table = db.table(name); // Don't check that table is part of transaction. It must fail lazily!\n            return new Table(name, table.schema, this);\n        }\n    });\n    //\n    //\n    //\n    // WhereClause\n    //\n    //\n    //\n    function WhereClause(table, index, orCollection) {\n        /// <param name=\"table\" type=\"Table\"></param>\n        /// <param name=\"index\" type=\"String\" optional=\"true\"></param>\n        /// <param name=\"orCollection\" type=\"Collection\" optional=\"true\"></param>\n        this._ctx = {\n            table: table,\n            index: index === \":id\" ? null : index,\n            or: orCollection\n        };\n    }\n    props(WhereClause.prototype, function () {\n        // WhereClause private methods\n        function fail(collectionOrWhereClause, err, T) {\n            var collection = collectionOrWhereClause instanceof WhereClause ?\n                new Collection(collectionOrWhereClause) :\n                collectionOrWhereClause;\n            collection._ctx.error = T ? new T(err) : new TypeError(err);\n            return collection;\n        }\n        function emptyCollection(whereClause) {\n            return new Collection(whereClause, function () { return IDBKeyRange.only(\"\"); }).limit(0);\n        }\n        function upperFactory(dir) {\n            return dir === \"next\" ? function (s) { return s.toUpperCase(); } : function (s) { return s.toLowerCase(); };\n        }\n        function lowerFactory(dir) {\n            return dir === \"next\" ? function (s) { return s.toLowerCase(); } : function (s) { return s.toUpperCase(); };\n        }\n        function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {\n            var length = Math.min(key.length, lowerNeedle.length);\n            var llp = -1;\n            for (var i = 0; i < length; ++i) {\n                var lwrKeyChar = lowerKey[i];\n                if (lwrKeyChar !== lowerNeedle[i]) {\n                    if (cmp(key[i], upperNeedle[i]) < 0)\n                        return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);\n                    if (cmp(key[i], lowerNeedle[i]) < 0)\n                        return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);\n                    if (llp >= 0)\n                        return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);\n                    return null;\n                }\n                if (cmp(key[i], lwrKeyChar) < 0)\n                    llp = i;\n            }\n            if (length < lowerNeedle.length && dir === \"next\")\n                return key + upperNeedle.substr(key.length);\n            if (length < key.length && dir === \"prev\")\n                return key.substr(0, upperNeedle.length);\n            return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));\n        }\n        function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {\n            /// <param name=\"needles\" type=\"Array\" elementType=\"String\"></param>\n            var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;\n            if (!needles.every(function (s) { return typeof s === 'string'; })) {\n                return fail(whereClause, STRING_EXPECTED);\n            }\n            function initDirection(dir) {\n                upper = upperFactory(dir);\n                lower = lowerFactory(dir);\n                compare = (dir === \"next\" ? simpleCompare : simpleCompareReverse);\n                var needleBounds = needles.map(function (needle) {\n                    return { lower: lower(needle), upper: upper(needle) };\n                }).sort(function (a, b) {\n                    return compare(a.lower, b.lower);\n                });\n                upperNeedles = needleBounds.map(function (nb) { return nb.upper; });\n                lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });\n                direction = dir;\n                nextKeySuffix = (dir === \"next\" ? \"\" : suffix);\n            }\n            initDirection(\"next\");\n            var c = new Collection(whereClause, function () {\n                return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);\n            });\n            c._ondirectionchange = function (direction) {\n                // This event onlys occur before filter is called the first time.\n                initDirection(direction);\n            };\n            var firstPossibleNeedle = 0;\n            c._addAlgorithm(function (cursor, advance, resolve) {\n                /// <param name=\"cursor\" type=\"IDBCursor\"></param>\n                /// <param name=\"advance\" type=\"Function\"></param>\n                /// <param name=\"resolve\" type=\"Function\"></param>\n                var key = cursor.key;\n                if (typeof key !== 'string')\n                    return false;\n                var lowerKey = lower(key);\n                if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {\n                    return true;\n                }\n                else {\n                    var lowestPossibleCasing = null;\n                    for (var i = firstPossibleNeedle; i < needlesLen; ++i) {\n                        var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);\n                        if (casing === null && lowestPossibleCasing === null)\n                            firstPossibleNeedle = i + 1;\n                        else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {\n                            lowestPossibleCasing = casing;\n                        }\n                    }\n                    if (lowestPossibleCasing !== null) {\n                        advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });\n                    }\n                    else {\n                        advance(resolve);\n                    }\n                    return false;\n                }\n            });\n            return c;\n        }\n        //\n        // WhereClause public methods\n        //\n        return {\n            between: function (lower, upper, includeLower, includeUpper) {\n                /// <summary>\n                ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.\n                /// </summary>\n                /// <param name=\"lower\"></param>\n                /// <param name=\"upper\"></param>\n                /// <param name=\"includeLower\" optional=\"true\">Whether items that equals lower should be included. Default true.</param>\n                /// <param name=\"includeUpper\" optional=\"true\">Whether items that equals upper should be included. Default false.</param>\n                /// <returns type=\"Collection\"></returns>\n                includeLower = includeLower !== false; // Default to true\n                includeUpper = includeUpper === true; // Default to false\n                try {\n                    if ((cmp(lower, upper) > 0) ||\n                        (cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))\n                        return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.\n                    return new Collection(this, function () { return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper); });\n                }\n                catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n            },\n            equals: function (value) {\n                return new Collection(this, function () { return IDBKeyRange.only(value); });\n            },\n            above: function (value) {\n                return new Collection(this, function () { return IDBKeyRange.lowerBound(value, true); });\n            },\n            aboveOrEqual: function (value) {\n                return new Collection(this, function () { return IDBKeyRange.lowerBound(value); });\n            },\n            below: function (value) {\n                return new Collection(this, function () { return IDBKeyRange.upperBound(value, true); });\n            },\n            belowOrEqual: function (value) {\n                return new Collection(this, function () { return IDBKeyRange.upperBound(value); });\n            },\n            startsWith: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                if (typeof str !== 'string')\n                    return fail(this, STRING_EXPECTED);\n                return this.between(str, str + maxString, true, true);\n            },\n            startsWithIgnoreCase: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                if (str === \"\")\n                    return this.startsWith(str);\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);\n            },\n            equalsIgnoreCase: function (str) {\n                /// <param name=\"str\" type=\"String\"></param>\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], \"\");\n            },\n            anyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0)\n                    return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, \"\");\n            },\n            startsWithAnyOfIgnoreCase: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0)\n                    return emptyCollection(this);\n                return addIgnoreCaseAlgorithm(this, function (x, a) {\n                    return a.some(function (n) {\n                        return x.indexOf(n) === 0;\n                    });\n                }, set, maxString);\n            },\n            anyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                var compare = ascending;\n                try {\n                    set.sort(compare);\n                }\n                catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                if (set.length === 0)\n                    return emptyCollection(this);\n                var c = new Collection(this, function () { return IDBKeyRange.bound(set[0], set[set.length - 1]); });\n                c._ondirectionchange = function (direction) {\n                    compare = (direction === \"next\" ? ascending : descending);\n                    set.sort(compare);\n                };\n                var i = 0;\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (compare(key, set[i]) > 0) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (compare(key, set[i]) === 0) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    }\n                    else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () { cursor.continue(set[i]); });\n                        return false;\n                    }\n                });\n                return c;\n            },\n            notEqual: function (value) {\n                return this.inAnyRange([[minKey, value], [value, maxKey]], { includeLowers: false, includeUppers: false });\n            },\n            noneOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (set.length === 0)\n                    return new Collection(this); // Return entire collection.\n                try {\n                    set.sort(ascending);\n                }\n                catch (e) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                // Transform [\"a\",\"b\",\"c\"] to a set of ranges for between/above/below: [[minKey,\"a\"], [\"a\",\"b\"], [\"b\",\"c\"], [\"c\",maxKey]]\n                var ranges = set.reduce(function (res, val) { return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]]; }, null);\n                ranges.push([set[set.length - 1], maxKey]);\n                return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });\n            },\n            /** Filter out values withing given set of ranges.\n            * Example, give children and elders a rebate of 50%:\n            *\n            *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});\n            *\n            * @param {(string|number|Date|Array)[][]} ranges\n            * @param {{includeLowers: boolean, includeUppers: boolean}} options\n            */\n            inAnyRange: function (ranges, options) {\n                if (ranges.length === 0)\n                    return emptyCollection(this);\n                if (!ranges.every(function (range) { return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0; })) {\n                    return fail(this, \"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower\", exceptions.InvalidArgument);\n                }\n                var includeLowers = !options || options.includeLowers !== false; // Default to true\n                var includeUppers = options && options.includeUppers === true; // Default to false\n                function addRange(ranges, newRange) {\n                    for (var i = 0, l = ranges.length; i < l; ++i) {\n                        var range = ranges[i];\n                        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {\n                            range[0] = min(range[0], newRange[0]);\n                            range[1] = max(range[1], newRange[1]);\n                            break;\n                        }\n                    }\n                    if (i === l)\n                        ranges.push(newRange);\n                    return ranges;\n                }\n                var sortDirection = ascending;\n                function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }\n                // Join overlapping ranges\n                var set;\n                try {\n                    set = ranges.reduce(addRange, []);\n                    set.sort(rangeSorter);\n                }\n                catch (ex) {\n                    return fail(this, INVALID_KEY_ARGUMENT);\n                }\n                var i = 0;\n                var keyIsBeyondCurrentEntry = includeUppers ?\n                    function (key) { return ascending(key, set[i][1]) > 0; } :\n                    function (key) { return ascending(key, set[i][1]) >= 0; };\n                var keyIsBeforeCurrentEntry = includeLowers ?\n                    function (key) { return descending(key, set[i][0]) > 0; } :\n                    function (key) { return descending(key, set[i][0]) >= 0; };\n                function keyWithinCurrentRange(key) {\n                    return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);\n                }\n                var checkKey = keyIsBeyondCurrentEntry;\n                var c = new Collection(this, function () {\n                    return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);\n                });\n                c._ondirectionchange = function (direction) {\n                    if (direction === \"next\") {\n                        checkKey = keyIsBeyondCurrentEntry;\n                        sortDirection = ascending;\n                    }\n                    else {\n                        checkKey = keyIsBeforeCurrentEntry;\n                        sortDirection = descending;\n                    }\n                    set.sort(rangeSorter);\n                };\n                c._addAlgorithm(function (cursor, advance, resolve) {\n                    var key = cursor.key;\n                    while (checkKey(key)) {\n                        // The cursor has passed beyond this key. Check next.\n                        ++i;\n                        if (i === set.length) {\n                            // There is no next. Stop searching.\n                            advance(resolve);\n                            return false;\n                        }\n                    }\n                    if (keyWithinCurrentRange(key)) {\n                        // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.\n                        return true;\n                    }\n                    else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {\n                        // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.\n                        // Continue to next key but don't include this one.\n                        return false;\n                    }\n                    else {\n                        // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.\n                        advance(function () {\n                            if (sortDirection === ascending)\n                                cursor.continue(set[i][0]);\n                            else\n                                cursor.continue(set[i][1]);\n                        });\n                        return false;\n                    }\n                });\n                return c;\n            },\n            startsWithAnyOf: function () {\n                var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);\n                if (!set.every(function (s) { return typeof s === 'string'; })) {\n                    return fail(this, \"startsWithAnyOf() only works with strings\");\n                }\n                if (set.length === 0)\n                    return emptyCollection(this);\n                return this.inAnyRange(set.map(function (str) {\n                    return [str, str + maxString];\n                }));\n            }\n        };\n    });\n    //\n    //\n    //\n    // Collection Class\n    //\n    //\n    //\n    function Collection(whereClause, keyRangeGenerator) {\n        /// <summary>\n        ///\n        /// </summary>\n        /// <param name=\"whereClause\" type=\"WhereClause\">Where clause instance</param>\n        /// <param name=\"keyRangeGenerator\" value=\"function(){ return IDBKeyRange.bound(0,1);}\" optional=\"true\"></param>\n        var keyRange = null, error = null;\n        if (keyRangeGenerator)\n            try {\n                keyRange = keyRangeGenerator();\n            }\n            catch (ex) {\n                error = ex;\n            }\n        var whereCtx = whereClause._ctx, table = whereCtx.table;\n        this._ctx = {\n            table: table,\n            index: whereCtx.index,\n            isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),\n            range: keyRange,\n            keysOnly: false,\n            dir: \"next\",\n            unique: \"\",\n            algorithm: null,\n            filter: null,\n            replayFilter: null,\n            justLimit: true,\n            isMatch: null,\n            offset: 0,\n            limit: Infinity,\n            error: error,\n            or: whereCtx.or,\n            valueMapper: table.hook.reading.fire\n        };\n    }\n    function isPlainKeyRange(ctx, ignoreLimitFilter) {\n        return !(ctx.filter || ctx.algorithm || ctx.or) &&\n            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);\n    }\n    props(Collection.prototype, function () {\n        //\n        // Collection Private Functions\n        //\n        function addFilter(ctx, fn) {\n            ctx.filter = combine(ctx.filter, fn);\n        }\n        function addReplayFilter(ctx, factory, isLimitFilter) {\n            var curr = ctx.replayFilter;\n            ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;\n            ctx.justLimit = isLimitFilter && !curr;\n        }\n        function addMatchFilter(ctx, fn) {\n            ctx.isMatch = combine(ctx.isMatch, fn);\n        }\n        /** @param ctx {\n         *      isPrimKey: boolean,\n         *      table: Table,\n         *      index: string\n         * }\n         * @param store IDBObjectStore\n         **/\n        function getIndexOrStore(ctx, store) {\n            if (ctx.isPrimKey)\n                return store;\n            var indexSpec = ctx.table.schema.idxByName[ctx.index];\n            if (!indexSpec)\n                throw new exceptions.Schema(\"KeyPath \" + ctx.index + \" on object store \" + store.name + \" is not indexed\");\n            return store.index(indexSpec.name);\n        }\n        /** @param ctx {\n         *      isPrimKey: boolean,\n         *      table: Table,\n         *      index: string,\n         *      keysOnly: boolean,\n         *      range?: IDBKeyRange,\n         *      dir: \"next\" | \"prev\"\n         * }\n         */\n        function openCursor(ctx, store) {\n            var idxOrStore = getIndexOrStore(ctx, store);\n            return ctx.keysOnly && 'openKeyCursor' in idxOrStore ?\n                idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) :\n                idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);\n        }\n        function iter(ctx, fn, resolve, reject, idbstore) {\n            var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;\n            if (!ctx.or) {\n                iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);\n            }\n            else\n                (function () {\n                    var set = {};\n                    var resolved = 0;\n                    function resolveboth() {\n                        if (++resolved === 2)\n                            resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.\n                    }\n                    function union(item, cursor, advance) {\n                        if (!filter || filter(cursor, advance, resolveboth, reject)) {\n                            var primaryKey = cursor.primaryKey;\n                            var key = '' + primaryKey;\n                            if (key === '[object ArrayBuffer]')\n                                key = '' + new Uint8Array(primaryKey);\n                            if (!hasOwn(set, key)) {\n                                set[key] = true;\n                                fn(item, cursor, advance);\n                            }\n                        }\n                    }\n                    ctx.or._iterate(union, resolveboth, reject, idbstore);\n                    iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);\n                })();\n        }\n        return {\n            //\n            // Collection Protected Functions\n            //\n            _read: function (fn, cb) {\n                var ctx = this._ctx;\n                return ctx.error ?\n                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :\n                    ctx.table._idbstore(READONLY, fn).then(cb);\n            },\n            _write: function (fn) {\n                var ctx = this._ctx;\n                return ctx.error ?\n                    ctx.table._trans(null, rejection.bind(null, ctx.error)) :\n                    ctx.table._idbstore(READWRITE, fn, \"locked\"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.\n            },\n            _addAlgorithm: function (fn) {\n                var ctx = this._ctx;\n                ctx.algorithm = combine(ctx.algorithm, fn);\n            },\n            _iterate: function (fn, resolve, reject, idbstore) {\n                return iter(this._ctx, fn, resolve, reject, idbstore);\n            },\n            clone: function (props$$1) {\n                var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);\n                if (props$$1)\n                    extend(ctx, props$$1);\n                rv._ctx = ctx;\n                return rv;\n            },\n            raw: function () {\n                this._ctx.valueMapper = null;\n                return this;\n            },\n            //\n            // Collection Public methods\n            //\n            each: function (fn) {\n                var ctx = this._ctx;\n                return this._read(function (resolve, reject, idbstore) {\n                    iter(ctx, fn, resolve, reject, idbstore);\n                });\n            },\n            count: function (cb) {\n                var ctx = this._ctx;\n                if (isPlainKeyRange(ctx, true)) {\n                    // This is a plain key range. We can use the count() method if the index.\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idx = getIndexOrStore(ctx, idbstore);\n                        var req = (ctx.range ? idx.count(ctx.range) : idx.count());\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = function (e) {\n                            resolve(Math.min(e.target.result, ctx.limit));\n                        };\n                    }, cb);\n                }\n                else {\n                    // Algorithms, filters or expressions are applied. Need to count manually.\n                    var count = 0;\n                    return this._read(function (resolve, reject, idbstore) {\n                        iter(ctx, function () { ++count; return false; }, function () { resolve(count); }, reject, idbstore);\n                    }, cb);\n                }\n            },\n            sortBy: function (keyPath, cb) {\n                /// <param name=\"keyPath\" type=\"String\"></param>\n                var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;\n                function getval(obj, i) {\n                    if (i)\n                        return getval(obj[parts[i]], i - 1);\n                    return obj[lastPart];\n                }\n                var order = this._ctx.dir === \"next\" ? 1 : -1;\n                function sorter(a, b) {\n                    var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);\n                    return aVal < bVal ? -order : aVal > bVal ? order : 0;\n                }\n                return this.toArray(function (a) {\n                    return a.sort(sorter);\n                }).then(cb);\n            },\n            toArray: function (cb) {\n                var ctx = this._ctx;\n                return this._read(function (resolve, reject, idbstore) {\n                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                        // Special optimation if we could use IDBObjectStore.getAll() or\n                        // IDBKeyRange.getAll():\n                        var readingHook = ctx.table.hook.reading.fire;\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ?\n                            idxOrStore.getAll(ctx.range, ctx.limit) :\n                            idxOrStore.getAll(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = readingHook === mirror ?\n                            eventSuccessHandler(resolve) :\n                            eventSuccessHandler(function (res) {\n                                try {\n                                    resolve(res.map(readingHook));\n                                }\n                                catch (e) {\n                                    reject(e);\n                                }\n                            });\n                    }\n                    else {\n                        // Getting array through a cursor.\n                        var a = [];\n                        iter(ctx, function (item) { a.push(item); }, function arrayComplete() {\n                            resolve(a);\n                        }, reject, idbstore);\n                    }\n                }, cb);\n            },\n            offset: function (offset) {\n                var ctx = this._ctx;\n                if (offset <= 0)\n                    return this;\n                ctx.offset += offset; // For count()\n                if (isPlainKeyRange(ctx)) {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function (cursor, advance) {\n                            if (offsetLeft === 0)\n                                return true;\n                            if (offsetLeft === 1) {\n                                --offsetLeft;\n                                return false;\n                            }\n                            advance(function () {\n                                cursor.advance(offsetLeft);\n                                offsetLeft = 0;\n                            });\n                            return false;\n                        };\n                    });\n                }\n                else {\n                    addReplayFilter(ctx, function () {\n                        var offsetLeft = offset;\n                        return function () { return (--offsetLeft < 0); };\n                    });\n                }\n                return this;\n            },\n            limit: function (numRows) {\n                this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()\n                addReplayFilter(this._ctx, function () {\n                    var rowsLeft = numRows;\n                    return function (cursor, advance, resolve) {\n                        if (--rowsLeft <= 0)\n                            advance(resolve); // Stop after this item has been included\n                        return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.\n                    };\n                }, true);\n                return this;\n            },\n            until: function (filterFunction, bIncludeStopEntry) {\n                addFilter(this._ctx, function (cursor, advance, resolve) {\n                    if (filterFunction(cursor.value)) {\n                        advance(resolve);\n                        return bIncludeStopEntry;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n                return this;\n            },\n            first: function (cb) {\n                return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);\n            },\n            last: function (cb) {\n                return this.reverse().first(cb);\n            },\n            filter: function (filterFunction) {\n                /// <param name=\"jsFunctionFilter\" type=\"Function\">function(val){return true/false}</param>\n                addFilter(this._ctx, function (cursor) {\n                    return filterFunction(cursor.value);\n                });\n                // match filters not used in Dexie.js but can be used by 3rd part libraries to test a\n                // collection for a match without querying DB. Used by Dexie.Observable.\n                addMatchFilter(this._ctx, filterFunction);\n                return this;\n            },\n            and: function (filterFunction) {\n                return this.filter(filterFunction);\n            },\n            or: function (indexName) {\n                return new WhereClause(this._ctx.table, indexName, this);\n            },\n            reverse: function () {\n                this._ctx.dir = (this._ctx.dir === \"prev\" ? \"next\" : \"prev\");\n                if (this._ondirectionchange)\n                    this._ondirectionchange(this._ctx.dir);\n                return this;\n            },\n            desc: function () {\n                return this.reverse();\n            },\n            eachKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) { cb(cursor.key, cursor); });\n            },\n            eachUniqueKey: function (cb) {\n                this._ctx.unique = \"unique\";\n                return this.eachKey(cb);\n            },\n            eachPrimaryKey: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });\n            },\n            keys: function (cb) {\n                var ctx = this._ctx;\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.key);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n            primaryKeys: function (cb) {\n                var ctx = this._ctx;\n                if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {\n                    // Special optimation if we could use IDBObjectStore.getAllKeys() or\n                    // IDBKeyRange.getAllKeys():\n                    return this._read(function (resolve, reject, idbstore) {\n                        var idxOrStore = getIndexOrStore(ctx, idbstore);\n                        var req = ctx.limit < Infinity ?\n                            idxOrStore.getAllKeys(ctx.range, ctx.limit) :\n                            idxOrStore.getAllKeys(ctx.range);\n                        req.onerror = eventRejectHandler(reject);\n                        req.onsuccess = eventSuccessHandler(resolve);\n                    }).then(cb);\n                }\n                ctx.keysOnly = !ctx.isMatch;\n                var a = [];\n                return this.each(function (item, cursor) {\n                    a.push(cursor.primaryKey);\n                }).then(function () {\n                    return a;\n                }).then(cb);\n            },\n            uniqueKeys: function (cb) {\n                this._ctx.unique = \"unique\";\n                return this.keys(cb);\n            },\n            firstKey: function (cb) {\n                return this.limit(1).keys(function (a) { return a[0]; }).then(cb);\n            },\n            lastKey: function (cb) {\n                return this.reverse().firstKey(cb);\n            },\n            distinct: function () {\n                var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];\n                if (!idx || !idx.multi)\n                    return this; // distinct() only makes differencies on multiEntry indexes.\n                var set = {};\n                addFilter(this._ctx, function (cursor) {\n                    var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string\n                    var found = hasOwn(set, strKey);\n                    set[strKey] = true;\n                    return !found;\n                });\n                return this;\n            },\n            //\n            // Methods that mutate storage\n            //\n            modify: function (changes) {\n                var self = this, ctx = this._ctx, hook = ctx.table.hook, updatingHook = hook.updating.fire, deletingHook = hook.deleting.fire;\n                return this._write(function (resolve, reject, idbstore, trans) {\n                    var modifyer;\n                    if (typeof changes === 'function') {\n                        // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)\n                        if (updatingHook === nop && deletingHook === nop) {\n                            // Noone cares about what is being changed. Just let the modifier function be the given argument as is.\n                            modifyer = changes;\n                        }\n                        else {\n                            // People want to know exactly what is being modified or deleted.\n                            // Let modifyer be a proxy function that finds out what changes the caller is actually doing\n                            // and call the hooks accordingly!\n                            modifyer = function (item) {\n                                var origItem = deepClone(item); // Clone the item first so we can compare laters.\n                                if (changes.call(this, item, this) === false)\n                                    return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)\n                                if (!hasOwn(this, \"value\")) {\n                                    // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.\n                                    deletingHook.call(this, this.primKey, item, trans);\n                                }\n                                else {\n                                    // No deletion. Check what was changed\n                                    var objectDiff = getObjectDiff(origItem, this.value);\n                                    var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);\n                                    if (additionalChanges) {\n                                        // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.\n                                        item = this.value;\n                                        keys(additionalChanges).forEach(function (keyPath) {\n                                            setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                        });\n                                    }\n                                }\n                            };\n                        }\n                    }\n                    else if (updatingHook === nop) {\n                        // changes is a set of {keyPath: value} and no one is listening to the updating hook.\n                        var keyPaths = keys(changes);\n                        var numKeys = keyPaths.length;\n                        modifyer = function (item) {\n                            var anythingModified = false;\n                            for (var i = 0; i < numKeys; ++i) {\n                                var keyPath = keyPaths[i], val = changes[keyPath];\n                                if (getByKeyPath(item, keyPath) !== val) {\n                                    setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath\n                                    anythingModified = true;\n                                }\n                            }\n                            return anythingModified;\n                        };\n                    }\n                    else {\n                        // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and\n                        // allow it to add additional modifications to make.\n                        var origChanges = changes;\n                        changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.\n                        modifyer = function (item) {\n                            var anythingModified = false;\n                            var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);\n                            if (additionalChanges)\n                                extend(changes, additionalChanges);\n                            keys(changes).forEach(function (keyPath) {\n                                var val = changes[keyPath];\n                                if (getByKeyPath(item, keyPath) !== val) {\n                                    setByKeyPath(item, keyPath, val);\n                                    anythingModified = true;\n                                }\n                            });\n                            if (additionalChanges)\n                                changes = shallowClone(origChanges); // Restore original changes for next iteration\n                            return anythingModified;\n                        };\n                    }\n                    var count = 0;\n                    var successCount = 0;\n                    var iterationComplete = false;\n                    var failures = [];\n                    var failKeys = [];\n                    var currentKey = null;\n                    function modifyItem(item, cursor) {\n                        currentKey = cursor.primaryKey;\n                        var thisContext = {\n                            primKey: cursor.primaryKey,\n                            value: item,\n                            onsuccess: null,\n                            onerror: null\n                        };\n                        function onerror(e) {\n                            failures.push(e);\n                            failKeys.push(thisContext.primKey);\n                            checkFinished();\n                            return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction\n                        }\n                        if (modifyer.call(thisContext, item, thisContext) !== false) {\n                            var bDelete = !hasOwn(thisContext, \"value\");\n                            ++count;\n                            tryCatch(function () {\n                                var req = (bDelete ? cursor.delete() : cursor.update(thisContext.value));\n                                req._hookCtx = thisContext;\n                                req.onerror = hookedEventRejectHandler(onerror);\n                                req.onsuccess = hookedEventSuccessHandler(function () {\n                                    ++successCount;\n                                    checkFinished();\n                                });\n                            }, onerror);\n                        }\n                        else if (thisContext.onsuccess) {\n                            // Hook will expect either onerror or onsuccess to always be called!\n                            thisContext.onsuccess(thisContext.value);\n                        }\n                    }\n                    function doReject(e) {\n                        if (e) {\n                            failures.push(e);\n                            failKeys.push(currentKey);\n                        }\n                        return reject(new ModifyError(\"Error modifying one or more objects\", failures, successCount, failKeys));\n                    }\n                    function checkFinished() {\n                        if (iterationComplete && successCount + failures.length === count) {\n                            if (failures.length > 0)\n                                doReject();\n                            else\n                                resolve(successCount);\n                        }\n                    }\n                    self.clone().raw()._iterate(modifyItem, function () {\n                        iterationComplete = true;\n                        checkFinished();\n                    }, doReject, idbstore);\n                });\n            },\n            'delete': function () {\n                var _this = this;\n                var ctx = this._ctx, range = ctx.range, deletingHook = ctx.table.hook.deleting.fire, hasDeleteHook = deletingHook !== nop;\n                if (!hasDeleteHook &&\n                    isPlainKeyRange(ctx) &&\n                    ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || !range)) {\n                    // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)\n                    // For chromium, this is the way most optimized version.\n                    // For IE/Edge, this could hang the indexedDB engine and make operating system instable\n                    // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)\n                    return this._write(function (resolve, reject, idbstore) {\n                        // Our API contract is to return a count of deleted items, so we have to count() before delete().\n                        var onerror = eventRejectHandler(reject), countReq = (range ? idbstore.count(range) : idbstore.count());\n                        countReq.onerror = onerror;\n                        countReq.onsuccess = function () {\n                            var count = countReq.result;\n                            tryCatch(function () {\n                                var delReq = (range ? idbstore.delete(range) : idbstore.clear());\n                                delReq.onerror = onerror;\n                                delReq.onsuccess = function () { return resolve(count); };\n                            }, function (err) { return reject(err); });\n                        };\n                    });\n                }\n                // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.\n                // Divide into chunks to not starve RAM.\n                // If has delete hook, we will have to collect not just keys but also objects, so it will use\n                // more memory and need lower chunk size.\n                var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;\n                return this._write(function (resolve, reject, idbstore, trans) {\n                    var totalCount = 0;\n                    // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.\n                    var collection = _this\n                        .clone({\n                        keysOnly: !ctx.isMatch && !hasDeleteHook\n                    }) // load just keys (unless filter() or and() or deleteHook has subscribers)\n                        .distinct() // In case multiEntry is used, never delete same key twice because resulting count\n                        .limit(CHUNKSIZE)\n                        .raw(); // Don't filter through reading-hooks (like mapped classes etc)\n                    var keysOrTuples = [];\n                    // We're gonna do things on as many chunks that are needed.\n                    // Use recursion of nextChunk function:\n                    var nextChunk = function () { return collection.each(hasDeleteHook ? function (val, cursor) {\n                        // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,\n                        // so that the hook can be called with its values in bulkDelete().\n                        keysOrTuples.push([cursor.primaryKey, cursor.value]);\n                    } : function (val, cursor) {\n                        // No one subscribes to hook('deleting'). Collect only primary keys:\n                        keysOrTuples.push(cursor.primaryKey);\n                    }).then(function () {\n                        // Chromium deletes faster when doing it in sort order.\n                        hasDeleteHook ?\n                            keysOrTuples.sort(function (a, b) { return ascending(a[0], b[0]); }) :\n                            keysOrTuples.sort(ascending);\n                        return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);\n                    }).then(function () {\n                        var count = keysOrTuples.length;\n                        totalCount += count;\n                        keysOrTuples = [];\n                        return count < CHUNKSIZE ? totalCount : nextChunk();\n                    }); };\n                    resolve(nextChunk());\n                });\n            }\n        };\n    });\n    //\n    //\n    //\n    // ------------------------- Help functions ---------------------------\n    //\n    //\n    //\n    function lowerVersionFirst(a, b) {\n        return a._cfg.version - b._cfg.version;\n    }\n    function setApiOnPlace(objs, tableNames, dbschema) {\n        tableNames.forEach(function (tableName) {\n            var schema = dbschema[tableName];\n            objs.forEach(function (obj) {\n                if (!(tableName in obj)) {\n                    if (obj === Transaction.prototype || obj instanceof Transaction) {\n                        // obj is a Transaction prototype (or prototype of a subclass to Transaction)\n                        // Make the API a getter that returns this.table(tableName)\n                        setProp(obj, tableName, { get: function () { return this.table(tableName); } });\n                    }\n                    else {\n                        // Table will not be bound to a transaction (will use Dexie.currentTransaction)\n                        obj[tableName] = new Table(tableName, schema);\n                    }\n                }\n            });\n        });\n    }\n    function removeTablesApi(objs) {\n        objs.forEach(function (obj) {\n            for (var key in obj) {\n                if (obj[key] instanceof Table)\n                    delete obj[key];\n            }\n        });\n    }\n    function iterate(req, filter, fn, resolve, reject, valueMapper) {\n        // Apply valueMapper (hook('reading') or mappped class)\n        var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;\n        // Wrap fn with PSD and microtick stuff from Promise.\n        var wrappedFn = wrap(mappedFn, reject);\n        if (!req.onerror)\n            req.onerror = eventRejectHandler(reject);\n        if (filter) {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () { cursor.continue(); };\n                    if (filter(cursor, function (advancer) { c = advancer; }, resolve, reject))\n                        wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });\n                    c();\n                }\n                else {\n                    resolve();\n                }\n            }, reject);\n        }\n        else {\n            req.onsuccess = trycatcher(function filter_record() {\n                var cursor = req.result;\n                if (cursor) {\n                    var c = function () { cursor.continue(); };\n                    wrappedFn(cursor.value, cursor, function (advancer) { c = advancer; });\n                    c();\n                }\n                else {\n                    resolve();\n                }\n            }, reject);\n        }\n    }\n    function parseIndexSyntax(indexes) {\n        /// <param name=\"indexes\" type=\"String\"></param>\n        /// <returns type=\"Array\" elementType=\"IndexSpec\"></returns>\n        var rv = [];\n        indexes.split(',').forEach(function (index) {\n            index = index.trim();\n            var name = index.replace(/([&*]|\\+\\+)/g, \"\"); // Remove \"&\", \"++\" and \"*\"\n            // Let keyPath of \"[a+b]\" be [\"a\",\"b\"]:\n            var keyPath = /^\\[/.test(name) ? name.match(/^\\[(.*)\\]$/)[1].split('+') : name;\n            rv.push(new IndexSpec(name, keyPath || null, /\\&/.test(index), /\\*/.test(index), /\\+\\+/.test(index), isArray(keyPath), /\\./.test(index)));\n        });\n        return rv;\n    }\n    function cmp(key1, key2) {\n        return indexedDB.cmp(key1, key2);\n    }\n    function min(a, b) {\n        return cmp(a, b) < 0 ? a : b;\n    }\n    function max(a, b) {\n        return cmp(a, b) > 0 ? a : b;\n    }\n    function ascending(a, b) {\n        return indexedDB.cmp(a, b);\n    }\n    function descending(a, b) {\n        return indexedDB.cmp(b, a);\n    }\n    function simpleCompare(a, b) {\n        return a < b ? -1 : a === b ? 0 : 1;\n    }\n    function simpleCompareReverse(a, b) {\n        return a > b ? -1 : a === b ? 0 : 1;\n    }\n    function combine(filter1, filter2) {\n        return filter1 ?\n            filter2 ?\n                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :\n                filter1 :\n            filter2;\n    }\n    function readGlobalSchema() {\n        db.verno = idbdb.version / 10;\n        db._dbSchema = globalSchema = {};\n        dbStoreNames = slice(idbdb.objectStoreNames, 0);\n        if (dbStoreNames.length === 0)\n            return; // Database contains no stores.\n        var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');\n        dbStoreNames.forEach(function (storeName) {\n            var store = trans.objectStore(storeName), keyPath = store.keyPath, dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\n            var primKey = new IndexSpec(keyPath, keyPath || \"\", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);\n            var indexes = [];\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var idbindex = store.index(store.indexNames[j]);\n                keyPath = idbindex.keyPath;\n                dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;\n                var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);\n                indexes.push(index);\n            }\n            globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});\n        });\n        setApiOnPlace([allTables], keys(globalSchema), globalSchema);\n    }\n    function adjustToExistingIndexNames(schema, idbtrans) {\n        /// <summary>\n        /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db\n        /// </summary>\n        /// <param name=\"schema\" type=\"Object\">Map between name and TableSchema</param>\n        /// <param name=\"idbtrans\" type=\"IDBTransaction\"></param>\n        var storeNames = idbtrans.db.objectStoreNames;\n        for (var i = 0; i < storeNames.length; ++i) {\n            var storeName = storeNames[i];\n            var store = idbtrans.objectStore(storeName);\n            hasGetAll = 'getAll' in store;\n            for (var j = 0; j < store.indexNames.length; ++j) {\n                var indexName = store.indexNames[j];\n                var keyPath = store.index(indexName).keyPath;\n                var dexieName = typeof keyPath === 'string' ? keyPath : \"[\" + slice(keyPath).join('+') + \"]\";\n                if (schema[storeName]) {\n                    var indexSpec = schema[storeName].idxByName[dexieName];\n                    if (indexSpec)\n                        indexSpec.name = indexName;\n                }\n            }\n        }\n        // Bug with getAll() on Safari ver<604 on Workers only, see discussion following PR #579\n        if (/Safari/.test(navigator.userAgent) &&\n            !/(Chrome\\/|Edge\\/)/.test(navigator.userAgent) &&\n            _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&\n            [].concat(navigator.userAgent.match(/Safari\\/(\\d*)/))[1] < 604) {\n            hasGetAll = false;\n        }\n    }\n    function fireOnBlocked(ev) {\n        db.on(\"blocked\").fire(ev);\n        // Workaround (not fully*) for missing \"versionchange\" event in IE,Edge and Safari:\n        connections\n            .filter(function (c) { return c.name === db.name && c !== db && !c._vcFired; })\n            .map(function (c) { return c.on(\"versionchange\").fire(ev); });\n    }\n    extend(this, {\n        Collection: Collection,\n        Table: Table,\n        Transaction: Transaction,\n        Version: Version,\n        WhereClause: WhereClause\n    });\n    init();\n    addons.forEach(function (fn) {\n        fn(db);\n    });\n}\nfunction parseType(type) {\n    if (typeof type === 'function') {\n        return new type();\n    }\n    else if (isArray(type)) {\n        return [parseType(type[0])];\n    }\n    else if (type && typeof type === 'object') {\n        var rv = {};\n        applyStructure(rv, type);\n        return rv;\n    }\n    else {\n        return type;\n    }\n}\nfunction applyStructure(obj, structure) {\n    keys(structure).forEach(function (member) {\n        var value = parseType(structure[member]);\n        obj[member] = value;\n    });\n    return obj;\n}\nfunction hookedEventSuccessHandler(resolve) {\n    // wrap() is needed when calling hooks because the rare scenario of:\n    //  * hook does a db operation that fails immediately (IDB throws exception)\n    //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.\n    //    wrap() will also execute in a virtual tick.\n    //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.\n    //  * If this was the last event in the bulk, the promise will resolve after a physical tick\n    //    and the transaction will have committed already.\n    // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,\n    // because it is always marked with _lib = true when created using Transaction._promise().\n    return wrap(function (event) {\n        var req = event.target, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.\n        result = ctx.value || req.result, // Pass the object value on updates. The result from IDB is the primary key.\n        hookSuccessHandler = ctx && ctx.onsuccess;\n        hookSuccessHandler && hookSuccessHandler(result);\n        resolve && resolve(result);\n    }, resolve);\n}\nfunction eventRejectHandler(reject) {\n    return wrap(function (event) {\n        preventDefault(event);\n        reject(event.target.error);\n        return false;\n    });\n}\nfunction eventSuccessHandler(resolve) {\n    return wrap(function (event) {\n        resolve(event.target.result);\n    });\n}\nfunction hookedEventRejectHandler(reject) {\n    return wrap(function (event) {\n        // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.\n        var req = event.target, err = req.error, ctx = req._hookCtx, // Contains the hook error handler. Put here instead of closure to boost performance.\n        hookErrorHandler = ctx && ctx.onerror;\n        hookErrorHandler && hookErrorHandler(err);\n        preventDefault(event);\n        reject(err);\n        return false;\n    });\n}\nfunction preventDefault(event) {\n    if (event.stopPropagation)\n        event.stopPropagation();\n    if (event.preventDefault)\n        event.preventDefault();\n}\nfunction awaitIterator(iterator) {\n    var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);\n    function step(getNext) {\n        return function (val) {\n            var next = getNext(val), value = next.value;\n            return next.done ? value :\n                (!value || typeof value.then !== 'function' ?\n                    isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :\n                    value.then(onSuccess, onError));\n        };\n    }\n    return step(callNext)();\n}\n//\n// IndexSpec struct\n//\nfunction IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {\n    /// <param name=\"name\" type=\"String\"></param>\n    /// <param name=\"keyPath\" type=\"String\"></param>\n    /// <param name=\"unique\" type=\"Boolean\"></param>\n    /// <param name=\"multi\" type=\"Boolean\"></param>\n    /// <param name=\"auto\" type=\"Boolean\"></param>\n    /// <param name=\"compound\" type=\"Boolean\"></param>\n    /// <param name=\"dotted\" type=\"Boolean\"></param>\n    this.name = name;\n    this.keyPath = keyPath;\n    this.unique = unique;\n    this.multi = multi;\n    this.auto = auto;\n    this.compound = compound;\n    this.dotted = dotted;\n    var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && ('[' + [].join.call(keyPath, '+') + ']');\n    this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? \"++\" : \"\") + keyPathSrc;\n}\n//\n// TableSchema struct\n//\nfunction TableSchema(name, primKey, indexes, instanceTemplate) {\n    /// <param name=\"name\" type=\"String\"></param>\n    /// <param name=\"primKey\" type=\"IndexSpec\"></param>\n    /// <param name=\"indexes\" type=\"Array\" elementType=\"IndexSpec\"></param>\n    /// <param name=\"instanceTemplate\" type=\"Object\"></param>\n    this.name = name;\n    this.primKey = primKey || new IndexSpec();\n    this.indexes = indexes || [new IndexSpec()];\n    this.instanceTemplate = instanceTemplate;\n    this.mappedClass = null;\n    this.idxByName = arrayToObject(indexes, function (index) { return [index.name, index]; });\n}\nfunction safariMultiStoreFix(storeNames) {\n    return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\nfunction getNativeGetDatabaseNamesFn(indexedDB) {\n    var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);\n    return fn && fn.bind(indexedDB);\n}\n// Export Error classes\nprops(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};\n//\n// Static methods and properties\n// \nprops(Dexie, {\n    //\n    // Static delete() method.\n    //\n    delete: function (databaseName) {\n        var db = new Dexie(databaseName), promise = db.delete();\n        promise.onblocked = function (fn) {\n            db.on(\"blocked\", fn);\n            return this;\n        };\n        return promise;\n    },\n    //\n    // Static exists() method.\n    //\n    exists: function (name) {\n        return new Dexie(name).open().then(function (db) {\n            db.close();\n            return true;\n        }).catch(Dexie.NoSuchDatabaseError, function () { return false; });\n    },\n    //\n    // Static method for retrieving a list of all existing databases at current host.\n    //\n    getDatabaseNames: function (cb) {\n        var getDatabaseNames = getNativeGetDatabaseNamesFn(Dexie.dependencies.indexedDB);\n        return getDatabaseNames ? new Promise(function (resolve, reject) {\n            var req = getDatabaseNames();\n            req.onsuccess = function (event) {\n                resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>\n            };\n            req.onerror = eventRejectHandler(reject);\n        }).then(cb) : dbNamesDB.dbnames.toCollection().primaryKeys(cb);\n    },\n    defineClass: function () {\n        // Default constructor able to copy given properties into this object.\n        function Class(properties) {\n            /// <param name=\"properties\" type=\"Object\" optional=\"true\">Properties to initialize object with.\n            /// </param>\n            if (properties)\n                extend(this, properties);\n        }\n        return Class;\n    },\n    applyStructure: applyStructure,\n    ignoreTransaction: function (scopeFunc) {\n        // In case caller is within a transaction but needs to create a separate transaction.\n        // Example of usage:\n        //\n        // Let's say we have a logger function in our app. Other application-logic should be unaware of the\n        // logger function and not need to include the 'logentries' table in all transaction it performs.\n        // The logging should always be done in a separate transaction and not be dependant on the current\n        // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.\n        //\n        //     Dexie.ignoreTransaction(function() {\n        //         db.logentries.add(newLogEntry);\n        //     });\n        //\n        // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction\n        // in current Promise-scope.\n        //\n        // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an\n        // API for this because\n        //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().\n        //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().\n        //  3) setImmediate() is not supported in the ES standard.\n        //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.\n        return PSD.trans ?\n            usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.\n            scopeFunc(); // No need to change scope because there is no ongoing transaction.\n    },\n    vip: function (fn) {\n        // To be used by subscribers to the on('ready') event.\n        // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.\n        // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD\n        // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since\n        // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.\n        // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()\n        // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by\n        // the caller will not resolve until database is opened.\n        return newScope(function () {\n            PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.\n            return fn();\n        });\n    },\n    async: function (generatorFn) {\n        return function () {\n            try {\n                var rv = awaitIterator(generatorFn.apply(this, arguments));\n                if (!rv || typeof rv.then !== 'function')\n                    return Promise.resolve(rv);\n                return rv;\n            }\n            catch (e) {\n                return rejection(e);\n            }\n        };\n    },\n    spawn: function (generatorFn, args, thiz) {\n        try {\n            var rv = awaitIterator(generatorFn.apply(thiz, args || []));\n            if (!rv || typeof rv.then !== 'function')\n                return Promise.resolve(rv);\n            return rv;\n        }\n        catch (e) {\n            return rejection(e);\n        }\n    },\n    // Dexie.currentTransaction property\n    currentTransaction: {\n        get: function () { return PSD.trans || null; }\n    },\n    waitFor: function (promiseOrFunction, optionalTimeout) {\n        // If a function is provided, invoke it and pass the returning value to Transaction.waitFor()\n        var promise = Promise.resolve(typeof promiseOrFunction === 'function' ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction)\n            .timeout(optionalTimeout || 60000); // Default the timeout to one minute. Caller may specify Infinity if required.       \n        // Run given promise on current transaction. If no current transaction, just return a Dexie promise based\n        // on given value.\n        return PSD.trans ? PSD.trans.waitFor(promise) : promise;\n    },\n    // Export our Promise implementation since it can be handy as a standalone Promise implementation\n    Promise: Promise,\n    // Dexie.debug proptery:\n    // Dexie.debug = false\n    // Dexie.debug = true\n    // Dexie.debug = \"dexie\" - don't hide dexie's stack frames.\n    debug: {\n        get: function () { return debug; },\n        set: function (value) {\n            setDebug(value, value === 'dexie' ? function () { return true; } : dexieStackFrameFilter);\n        }\n    },\n    // Export our derive/extend/override methodology\n    derive: derive,\n    extend: extend,\n    props: props,\n    override: override,\n    // Export our Events() function - can be handy as a toolkit\n    Events: Events,\n    // Utilities\n    getByKeyPath: getByKeyPath,\n    setByKeyPath: setByKeyPath,\n    delByKeyPath: delByKeyPath,\n    shallowClone: shallowClone,\n    deepClone: deepClone,\n    getObjectDiff: getObjectDiff,\n    asap: asap,\n    maxKey: maxKey,\n    minKey: minKey,\n    // Addon registry\n    addons: [],\n    // Global DB connection list\n    connections: connections,\n    MultiModifyError: exceptions.Modify,\n    errnames: errnames,\n    // Export other static classes\n    IndexSpec: IndexSpec,\n    TableSchema: TableSchema,\n    //\n    // Dependencies\n    //\n    // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.\n    //\n    // In node.js, however, these properties must be set \"manually\" before instansiating a new Dexie().\n    // For node.js, you need to require indexeddb-js or similar and then set these deps.\n    //\n    dependencies: (function () {\n        try {\n            return {\n                // Required:\n                indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,\n                IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange\n            };\n        }\n        catch (e) {\n            return {\n                indexedDB: null,\n                IDBKeyRange: null\n            };\n        }\n    })(),\n    // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.\n    semVer: DEXIE_VERSION,\n    version: DEXIE_VERSION.split('.')\n        .map(function (n) { return parseInt(n); })\n        .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }),\n    // https://github.com/dfahlander/Dexie.js/issues/186\n    // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return\n    // x.default. Workaround: Set Dexie.default = Dexie.\n    default: Dexie,\n    // Make it possible to import {Dexie} (non-default import)\n    // Reason 1: May switch to that in future.\n    // Reason 2: We declare it both default and named exported in d.ts to make it possible\n    // to let addons extend the Dexie interface with Typescript 2.1 (works only when explicitely\n    // exporting the symbol, not just default exporting)\n    Dexie: Dexie\n});\n// Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.\nPromise.rejectionMapper = mapError;\n// Initialize dbNamesDB (won't ever be opened on chromium browsers')\ndbNamesDB = new Dexie('__dbnames');\ndbNamesDB.version(1).stores({ dbnames: 'name' });\n(function () {\n    // Migrate from Dexie 1.x database names stored in localStorage:\n    var DBNAMES = 'Dexie.DatabaseNames';\n    try {\n        if (typeof localStorage !== undefined && _global.document !== undefined) {\n            // Have localStorage and is not executing in a worker. Lets migrate from Dexie 1.x.\n            JSON.parse(localStorage.getItem(DBNAMES) || \"[]\")\n                .forEach(function (name) { return dbNamesDB.dbnames.put({ name: name }).catch(nop); });\n            localStorage.removeItem(DBNAMES);\n        }\n    }\n    catch (_e) { }\n})();\n\nreturn Dexie;\n\n})));\n//# sourceMappingURL=dexie.js.map\n","import { CacheModel } from \"./cache.models\";\r\n\r\nexport interface ICacheConfigService {\r\n    enableLogs: boolean;\r\n    models: CacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nexport class CacheConfigService implements ICacheConfigService {\r\n    constructor(\r\n        public enableLogs: boolean,\r\n        public models: CacheModel[],\r\n        public prefix: string\r\n    ) { }\r\n}\r\n\r\nexport interface ICacheConfigProvider {\r\n    enableLogs: boolean;\r\n    models: CacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nclass CacheConfigProvider implements ICacheConfigProvider, ng.IServiceProvider {\r\n\r\n    private _service: CacheConfigService;\r\n\r\n    enableLogs: boolean = false;\r\n    models: CacheModel[] = [];\r\n    prefix: string = 'PipCache';\r\n\r\n    constructor() {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheConfigService(\r\n                this.enableLogs,\r\n                this.models,\r\n                this.prefix\r\n            );\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCacheConfig', CacheConfigProvider);","import { ICacheService } from \"./cache.service\";\r\nimport { CacheCollectionParams } from \"./cache.models\";\r\n\r\nfunction configureInterceptor(\r\n    $httpProvider: ng.IHttpProvider\r\n) {\r\n    \"ngInject\";\r\n\r\n    $httpProvider.interceptors.push(function ($q: ng.IQService, pipCache: ICacheService) {\r\n        const getDefaultParams = function (params: any): CacheCollectionParams {\r\n            const ret: CacheCollectionParams = {};\r\n            if (params) {\r\n                if (params.hasOwnProperty('offset')) { ret.offset = parseInt(params.offset, 10); }\r\n                if (params.hasOwnProperty('limit')) { ret.limit = parseInt(params.limit, 10); }\r\n            }\r\n            return ret;\r\n        };\r\n        return {\r\n            request: (config: ng.IRequestConfig) => {\r\n                for (const model of pipCache.models) {\r\n                    for (const ik of Object.keys(model.interceptors)) {\r\n                        const interceptor = model.interceptors[ik];\r\n                        const match = interceptor.match.exec(config.url);\r\n                        if (match) {\r\n                            switch (config.method) {\r\n                                case 'GET':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            const { groups } = match;\r\n                                            return pipCache.getItem(model.name, interceptor.getKey(groups), interceptor.options)\r\n                                                .then(item => {\r\n                                                    if (!item) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            pipCache.setItem(model.name, body, interceptor.options);\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        return $q.reject({ cachedData: item });\r\n                                                    }\r\n                                                });\r\n                                        case 'collection':\r\n                                            const params = interceptor.getParams ? interceptor.getParams(config.params) : getDefaultParams(config.params);\r\n                                            return pipCache.getItems(model.name, params, interceptor.options)\r\n                                                .then(items => {\r\n                                                    if (!items) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            const its = interceptor.responseModify\r\n                                                                ? interceptor.responseModify.responseToItems(body) : body;\r\n                                                            pipCache.setItems(model.name, its,\r\n                                                                { params, options: interceptor.options });\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        const resp = interceptor.responseModify\r\n                                                            ? interceptor.responseModify.itemsToResponse(items) : items;\r\n                                                        return $q.reject({ cachedData: resp });\r\n                                                    }\r\n                                                });\r\n                                        default:\r\n                                            console.error(`Unknown type of interceptor (${ik})`);\r\n                                            break;\r\n                                    }\r\n                                case 'POST':\r\n                                case 'PUT':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                        case 'collection':\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.setItem(model.name, body, { removeTotal: config.method === 'POST' });\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                case 'DELETE':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            const { groups } = match;\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.deleteItems(model.name, [interceptor.getKey(groups)]);\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return config;\r\n            },\r\n            response: <T>(response: ng.IHttpPromiseCallbackArg<T>) => {\r\n                if (response.config.hasOwnProperty('onResponse') && typeof (response.config as any).onResponse === 'function') {\r\n                    (response.config as any).onResponse(response.data);\r\n                }\r\n                return response;\r\n            },\r\n            responseError: function (rejection) {\r\n                if (rejection && rejection.cachedData) {\r\n                    return $q.resolve({ data: rejection.cachedData });\r\n                }\r\n                return $q.reject(rejection);\r\n            }\r\n        } as ng.IHttpInterceptor;\r\n    });\r\n}\r\n\r\nangular\r\n    .module('pipCache')\r\n    .config(configureInterceptor);","export class CacheCollectionParams {\r\n    offset?: number;\r\n    limit?: number;\r\n}\r\n\r\nexport class CacheInterceptorOptions {\r\n    maxAge?: number;\r\n}\r\n\r\nexport class CacheModel {\r\n    name: string;\r\n    options: {\r\n        maxAge: number;\r\n        key?: string;\r\n    };\r\n    interceptors: {\r\n        item?: {\r\n            match: RegExp;\r\n            options?: CacheInterceptorOptions;\r\n            getKey: (groups: any) => any;\r\n        };\r\n        collection?: {\r\n            match: RegExp;\r\n            options?: CacheInterceptorOptions;\r\n            responseModify?: {\r\n                responseToItems: (resp: any) => any[];\r\n                itemsToResponse: (items: any[]) => any;\r\n            }\r\n            getParams?: (params: any) => CacheCollectionParams;\r\n        };\r\n    };\r\n}\r\n","import { CacheInterceptorOptions, CacheCollectionParams, CacheModel } from './cache.models';\r\nimport { ICacheConfigProvider } from './cache-config.service';\r\nimport * as Dexie from 'dexie';\r\n\r\nexport interface ICacheService {\r\n    models: CacheModel[];\r\n    getItem(modelName: string, key: any, options?: CacheInterceptorOptions): Promise<any>;\r\n    getItems(modelName: string, params?: CacheCollectionParams, options?: CacheInterceptorOptions): Promise<any[]>;\r\n    setItem(modelName: string, item: any, options?: { removeTotal?: boolean }): Promise<any>;\r\n    setItems(modelName: string, items: any[], payload?: {\r\n        params?: CacheCollectionParams, options?: CacheInterceptorOptions\r\n    }): Promise<any[]>\r\n    deleteItems(modelName: string, keys: any[]): Promise<any>;\r\n    clear(model?: string | string[]): Promise<any>;\r\n}\r\n\r\nexport class CacheService implements ICacheService {\r\n\r\n    private openedDbs = new Map<string, Dexie.Dexie>();\r\n\r\n    constructor(private config: ICacheConfigProvider) { }\r\n\r\n    private getDbName(modelName: string): string {\r\n        if (!modelName) { throw new Error('Model name should be defined'); }\r\n        return this.config.prefix + modelName.charAt(0).toUpperCase() + modelName.slice(1);\r\n    }\r\n\r\n    private getDb(model: CacheModel): Dexie.Dexie {\r\n        if (!model || !model.name) { throw new Error('Model should be defined'); }\r\n        const dbName = this.getDbName(model.name);\r\n        if (this.openedDbs.has(dbName)) { return this.openedDbs.get(dbName); }\r\n        const db = new Dexie.Dexie(dbName);\r\n        const modelKey = model.options.key || 'id';\r\n        db.version(1).stores({\r\n            items: modelKey,\r\n            lastRead: '',\r\n            indexes: 'idx,' + modelKey,\r\n            meta: ''\r\n        });\r\n        this.openedDbs.set(dbName, db);\r\n        return db;\r\n    }\r\n\r\n    private getModel(modelName: string): CacheModel {\r\n        return this.models.find(m => m.name === modelName);\r\n    }\r\n\r\n    public get models(): CacheModel[] { return this.config.models || []; }\r\n\r\n    async getItem(modelName: string, key: any, options?: CacheInterceptorOptions): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const [expire, item] = await Promise.all([\r\n            db.table('lastRead').get(key),\r\n            db.table('items').get(key)\r\n        ]);\r\n        const maxAge = options && options.maxAge || model.options.maxAge;\r\n        const expired = expire + maxAge <= new Date().valueOf();\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET single item #' + key);\r\n            console.log('Item: ', item);\r\n            console.log('Expired: ', expired);\r\n            console.log('Expired at: ', new Date(expire));\r\n            console.groupEnd();\r\n        }\r\n        return expired ? null : item;\r\n    }\r\n    async getItems(modelName: string, params?: CacheCollectionParams, options?: CacheInterceptorOptions): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const modelKey = model.options.key || 'id';\r\n        // get indexes of items we should receive\r\n        const totalDetails: { total: number, lastRead: number } = await db.table('meta').get('total');\r\n        const maxAge = options && options.maxAge || model.options.maxAge;\r\n        const total = totalDetails && (totalDetails.lastRead + maxAge >= new Date().valueOf())\r\n            ? totalDetails.total : undefined;\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET collection of items');\r\n            console.log('Params: ', params);\r\n        }\r\n        if (params && Object.keys(params).length) {\r\n            // If we have some limitations we have to get ids of items and then items\r\n            const offset = params.hasOwnProperty('offset') ? params.offset : 0;\r\n            const limit = params.hasOwnProperty('limit') ? params.limit : undefined;\r\n            if (limit !== undefined) {\r\n                // This is the only case where we don't need to know about total items count\r\n                const indexes = await db.table('indexes').where('idx').between(offset, offset + limit, true, false).toArray();\r\n                if (indexes.length !== limit && (total === undefined || indexes.length !== total - offset)) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('There\\'s not enough information about indexes');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                } else {\r\n                    const ids = indexes.map(idx => idx.id);\r\n                    const [items, reads] = await Promise.all([\r\n                        db.table('items').where(modelKey).anyOf(ids).toArray(),\r\n                        db.table('lastRead').where('').anyOf(ids).toArray()\r\n                    ]);\r\n                    if (!items || items.length !== indexes.length || !reads || reads.length !== indexes.length) {\r\n                        if (this.config.enableLogs) {\r\n                            console.warn('Not all items presented in cache');\r\n                            console.groupEnd();\r\n                        }\r\n                        return null;\r\n                    }\r\n                    if (Math.min(...reads) + maxAge <= new Date().valueOf()) {\r\n                        if (this.config.enableLogs) {\r\n                            console.log('Items was expired');\r\n                            console.groupEnd();\r\n                        }\r\n                        return null;\r\n                    }\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Items: ', items);\r\n                        console.groupEnd();\r\n                    }\r\n                    return items;\r\n                }\r\n            } else if (total !== undefined) {\r\n                // In this case we should check is total count of items presented\r\n                const indexes = await db.table('indexes').where('idx').aboveOrEqual(offset).toArray();\r\n                if (indexes.length !== limit || indexes.length !== total - offset) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Not all items presented in cache');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                const ids = indexes.map(idx => idx.id);\r\n                const [items, reads] = await Promise.all([\r\n                    db.table('items').where(modelKey).anyOf(ids).toArray(),\r\n                    db.table('lastRead').where(modelKey).anyOf(ids).toArray()\r\n                ]);\r\n                if (!items || items.length !== indexes.length || !reads || reads.length !== indexes.length) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Not all items presented in cache');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                if (Math.min(...reads) + maxAge >= new Date().valueOf()) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Items was expired');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                if (this.config.enableLogs) {\r\n                    console.log('Items: ', items);\r\n                    console.groupEnd();\r\n                }\r\n                return items;\r\n            }\r\n        } else if (total !== undefined) {\r\n            // If there is no limitations we have to return all items if they're all presented\r\n            const [items, reads] = await Promise.all([\r\n                db.table('items').toArray(),\r\n                db.table('lastRead').toArray()\r\n            ]);\r\n            if (!items || items.length !== total || !reads || reads.length !== total) {\r\n                if (this.config.enableLogs) {\r\n                    console.log('Not all items presented in cache');\r\n                    console.groupEnd();\r\n                }\r\n                return null;\r\n            }\r\n            if (Math.min(...reads) + maxAge <= new Date().valueOf()) {\r\n                if (this.config.enableLogs) {\r\n                    console.log('Items was expired');\r\n                    console.groupEnd();\r\n                }\r\n                return null;\r\n            }\r\n            if (this.config.enableLogs) {\r\n                console.log('Items: ', items);\r\n                console.groupEnd();\r\n            }\r\n            return items;\r\n        } else {\r\n            if (this.config.enableLogs) {\r\n                console.log('We want to return all items, but we don\\'t know how many they are');\r\n                console.groupEnd();\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    async setItem(modelName: string, item: any, options?: { removeTotal?: boolean; }): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const [expire, it] = await Promise.all([\r\n            db.table('lastRead').put(new Date().valueOf(), item[model.options.key]),\r\n            db.table('items').put(item)\r\n        ]);\r\n        if (options) {\r\n            if (options.removeTotal) {\r\n                await db.table('meta').delete('total');\r\n            }\r\n        }\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] SET single item #' + item[model.options.key]);\r\n            console.log('Item: ', it);\r\n            console.log('Readed at: ', new Date());\r\n            console.groupEnd();\r\n        }\r\n        return it;\r\n    }\r\n    async setItems(modelName: string, items: any[], payload?:\r\n        { params?: CacheCollectionParams; options?: CacheInterceptorOptions; }): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const modelKey = model.options.key || 'id';\r\n        const db = this.getDb(model);\r\n        const lr = new Date().valueOf();\r\n        const offset = payload && payload.params && payload.params.offset || 0;\r\n        const ids = items.map(it => it[modelKey]);\r\n        const indexes = ids.map((id, idx) => ({ id, idx: idx + offset }));\r\n        const promises = [\r\n            db.table('lastRead').bulkPut(new Array(items.length).fill(lr), ids),\r\n            db.table('items').bulkPut(items),\r\n            db.table('indexes').bulkPut(indexes)\r\n        ];\r\n        let total;\r\n        if ((payload && payload.params && payload.params.limit && items && items.length < payload.params.limit)\r\n            || (!payload || !payload.params || !Object.keys(payload.params).length)) {\r\n            total = (payload.params.offset || 0) + items.length;\r\n            promises.push(db.table('meta').put({ lastRead: new Date().valueOf(), total }, 'total'));\r\n        }\r\n        return Promise.all(promises).then(([args]) => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] SET collection of items');\r\n                console.log('Params: ', payload.params);\r\n                console.log('Items: ', items);\r\n                console.log('Last read at: ', new Date());\r\n                if (args && args.length === 2) {\r\n                    console.log('New total: ', total);\r\n                }\r\n                console.groupEnd();\r\n            }\r\n            return items;\r\n        });\r\n    }\r\n    async deleteItems(modelName: string, keys: any[]): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const modelKey = model.options.key || 'id';\r\n        return Promise.all([\r\n            db.table('lastRead').bulkDelete(keys),\r\n            db.table('items').bulkDelete(keys),\r\n            db.table('indexes').where(modelKey).anyOf(keys).delete(),\r\n            db.table('meta').delete('total')\r\n        ]).then(() => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] DELETE');\r\n                console.log('Keys: ', keys);\r\n                console.groupEnd();\r\n            }\r\n        });\r\n    }\r\n    async clear(model?: string | string[]): Promise<any> {\r\n        return new Promise(resolve => {\r\n            const dbs: string[] = [];\r\n            if (model) {\r\n                Array.isArray(model)\r\n                    ? dbs.push(...model.map(m => this.getDbName(m)))\r\n                    : dbs.push(this.getDbName(model));\r\n                resolve(dbs);\r\n            } else {\r\n                resolve(Dexie.Dexie.getDatabaseNames());\r\n            }\r\n        }).then((names: string[]) => {\r\n            const dbs = names.filter(name => name.startsWith(this.config.prefix));\r\n            if (this.config.enableLogs) {\r\n                console.log('databases to delete: ', names);\r\n            }\r\n            const promises = [];\r\n            for (const name of dbs) {\r\n                try {\r\n                    const db = this.openedDbs.has(name) ? this.openedDbs.get(name) : new Dexie.Dexie(name);\r\n                    promises.push(db.table('items').clear());\r\n                    promises.push(db.table('meta').clear());\r\n                    promises.push(db.table('lastRead').clear());\r\n                    promises.push(db.table('indexes').clear());\r\n                } catch (err) {\r\n                    if (this.config.enableLogs) {\r\n                        console.warn('Error opening database ' + name);\r\n                    }\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        }).then(res => {\r\n            if (this.config.enableLogs) {\r\n                console.log('%c%s', 'color: blue; font: 1.2rem Impact;', '[PipCache] CLEAR');\r\n                if (model) { console.log('Model(s): ', model); } else { console.log('all models'); }\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport interface ICacheProvider {\r\n    models: CacheModel[];\r\n    registerModel(model: CacheModel): boolean;\r\n}\r\n\r\nclass CacheProvider implements ICacheProvider {\r\n\r\n    private _service: ICacheService;\r\n\r\n    constructor(private pipCacheConfigProvider: ICacheConfigProvider) {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public get models(): CacheModel[] { return this.pipCacheConfigProvider.models; }\r\n\r\n    public registerModel(model: CacheModel) {\r\n        if (!model) { return false; }\r\n        const res = this.models.find(m => m.name === model.name);\r\n        if (res) { return false; }\r\n        this.models.push(model);\r\n        return true;\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheService(this.pipCacheConfigProvider);\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCache', CacheProvider);","angular.module('pipCache', []);\r\n\r\nimport './cache-config.service';\r\nimport './cache.service';\r\nimport './cache.interceptor';\r\n\r\nexport * from './cache.models';\r\nexport * from './cache-config.service';\r\nexport * from './cache.service';\r\n","﻿import './cache/index';\r\n\r\nexport * from './cache/index';\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}