{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/cache/cache-config.service.ts","src/cache/cache.interceptor.ts","src/cache/cache.models.ts","src/cache/cache.service.ts","src/cache/index.ts","src/index.ts"],"names":[],"mappings":"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","file":"pip-webui-cache.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { PipCacheModel } from \"./cache.models\";\r\n\r\nexport interface ICacheConfigService {\r\n    enabled: boolean;\r\n    enableLogs: boolean;\r\n    models: PipCacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nexport class CacheConfigService implements ICacheConfigService {\r\n    constructor(\r\n        public enabled: boolean,\r\n        public enableLogs: boolean,\r\n        public models: PipCacheModel[],\r\n        public prefix: string\r\n    ) { }\r\n}\r\n\r\nexport interface ICacheConfigProvider {\r\n    enableLogs: boolean;\r\n    models: PipCacheModel[];\r\n    prefix: string;\r\n}\r\n\r\nclass CacheConfigProvider implements ICacheConfigProvider, ng.IServiceProvider {\r\n\r\n    private _service: CacheConfigService;\r\n\r\n    enabled: boolean = true;\r\n    enableLogs: boolean = false;\r\n    models: PipCacheModel[] = [];\r\n    prefix: string = 'PipCache';\r\n\r\n    constructor() {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheConfigService(\r\n                this.enabled,\r\n                this.enableLogs,\r\n                this.models,\r\n                this.prefix\r\n            );\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCacheConfig', CacheConfigProvider);","import { ICacheService } from \"./cache.service\";\r\nimport { ICacheConfigService } from \"./cache-config.service\";\r\n\r\nfunction configureInterceptor(\r\n    $httpProvider: ng.IHttpProvider\r\n) {\r\n    \"ngInject\";\r\n\r\n    $httpProvider.interceptors.push(function ($q: ng.IQService, pipCache: ICacheService, pipCacheConfig: ICacheConfigService) {\r\n        return {\r\n            request: (config: ng.IRequestConfig) => {\r\n                if (!pipCacheConfig.enabled) { return config; }\r\n                for (const model of pipCache.models) {\r\n                    for (const ik of Object.keys(model.interceptors)) {\r\n                        const interceptor = model.interceptors[ik];\r\n                        const match = interceptor.match.exec(config.url);\r\n                        if (match) {\r\n                            switch (config.method) {\r\n                                case 'GET':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            return pipCache.getItem(model.name, interceptor.getKey(match), interceptor.options)\r\n                                                .then(item => {\r\n                                                    if (!item) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            pipCache.setItem(model.name, body, interceptor.options);\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        return $q.reject({ cachedData: item });\r\n                                                    }\r\n                                                });\r\n                                        case 'collection':\r\n                                            return pipCache.getItems(model.name, { httpParams: config.params, interceptor })\r\n                                                .then(items => {\r\n                                                    if (!items) {\r\n                                                        (config as any).onResponse = (body) => {\r\n                                                            const its = interceptor.responseModify\r\n                                                                ? interceptor.responseModify.responseToItems(body) : body;\r\n                                                            pipCache.setItems(model.name, its,\r\n                                                                { httpParams: config.params, interceptor });\r\n                                                        };\r\n                                                        return config;\r\n                                                    } else {\r\n                                                        config.timeout = $q.defer().promise;\r\n                                                        const resp = interceptor.responseModify\r\n                                                            ? interceptor.responseModify.itemsToResponse(items) : items;\r\n                                                        return $q.reject({ cachedData: resp });\r\n                                                    }\r\n                                                });\r\n                                        default:\r\n                                            console.error(`Unknown type of interceptor (${ik})`);\r\n                                            break;\r\n                                    }\r\n                                case 'POST':\r\n                                case 'PUT':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                        case 'collection':\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.setItem(model.name, body, { removeTotal: config.method === 'POST' });\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                case 'DELETE':\r\n                                    switch (ik) {\r\n                                        case 'item':\r\n                                            (config as any).onResponse = (body) => {\r\n                                                pipCache.deleteItems(model.name, [interceptor.getKey(match)]);\r\n                                            };\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return config;\r\n            },\r\n            response: <T>(response: ng.IHttpPromiseCallbackArg<T>) => {\r\n                if (response.config.hasOwnProperty('onResponse') && typeof (response.config as any).onResponse === 'function') {\r\n                    (response.config as any).onResponse(response.data);\r\n                }\r\n                return response;\r\n            },\r\n            responseError: function (rejection) {\r\n                if (rejection && rejection.cachedData) {\r\n                    return $q.resolve({ data: rejection.cachedData });\r\n                }\r\n                return $q.reject(rejection);\r\n            }\r\n        } as ng.IHttpInterceptor;\r\n    });\r\n}\r\n\r\nangular\r\n    .module('pipCache')\r\n    .config(configureInterceptor);","export class PipCachePaginationParams {\r\n    offset?: number;\r\n    limit?: number;\r\n}\r\n\r\nexport function extractPaginationDefault(params: any): [PipCachePaginationParams, any] {\r\n    const res = new PipCachePaginationParams();\r\n    const pars = _.cloneDeep(params);\r\n    if (params) {\r\n        if (params.hasOwnProperty('offset')) {\r\n            res.offset = parseInt(params.offset, 10);\r\n            delete pars.offset;\r\n        }\r\n        if (params.hasOwnProperty('limit')) \r\n        {\r\n            res.limit = parseInt(params.limit, 10);\r\n            delete pars.limit;\r\n        }\r\n    }\r\n    return [res, pars];\r\n}\r\n\r\nexport class PipCacheInterceptorOptions {\r\n    maxAge?: number;\r\n}\r\n\r\nexport class PipCacheInterceptorSettings {\r\n    match: RegExp;\r\n    options?: PipCacheInterceptorOptions;\r\n}\r\n\r\nexport class PipCacheInterceptorItemSettings extends PipCacheInterceptorSettings {\r\n    getKey: (groups: any) => any;\r\n}\r\n\r\nexport class PipCacheInterceptorCollectionSettings extends PipCacheInterceptorSettings {\r\n    responseModify?: {\r\n        responseToItems: (resp: any) => any[];\r\n        itemsToResponse: (items: any[]) => any;\r\n    };\r\n    // extractPagination?: (params: HttpParams) => [PipCachePaginationParams, HttpParams];\r\n}\r\n\r\nexport class PipCacheModel {\r\n    name: string;\r\n    options: {\r\n        maxAge: number;\r\n        key?: string;\r\n    };\r\n    interceptors: {\r\n        item?: PipCacheInterceptorItemSettings;\r\n        collection?: PipCacheInterceptorCollectionSettings;\r\n    };\r\n}\r\n","import { PipCacheInterceptorOptions, PipCachePaginationParams, PipCacheModel, PipCacheInterceptorCollectionSettings, extractPaginationDefault } from './cache.models';\r\nimport { ICacheConfigProvider } from './cache-config.service';\r\n\r\ndeclare var Dexie;\r\ndeclare var objectHash;\r\n\r\nclass TotalItem {\r\n    hash: string;\r\n    total: {\r\n        value: number;\r\n        lastRead: number;\r\n    };\r\n    idxMap: any[];\r\n}\r\n\r\nexport interface ICacheService {\r\n    models: PipCacheModel[];\r\n    getItem(modelName: string, key: any, options?: PipCacheInterceptorOptions): Promise<any>;\r\n    getItems(modelName: string, payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]>;\r\n    setItem(modelName: string, item: any, options?: { removeTotal?: boolean }): Promise<any>;\r\n    setItems(modelName: string, items: any[], payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]>\r\n    deleteItems(modelName: string, keys: any[]): Promise<any>;\r\n    clear(model?: string | string[]): Promise<any>;\r\n}\r\n\r\nexport class CacheService implements ICacheService {\r\n\r\n    private openedDbs = new Map<string, any>();\r\n\r\n    constructor(private config: ICacheConfigProvider) { }\r\n\r\n    private getDbName(modelName: string): string {\r\n        if (!modelName) { throw new Error('Model name should be defined'); }\r\n        return this.config.prefix + modelName.charAt(0).toUpperCase() + modelName.slice(1);\r\n    }\r\n\r\n    private getDb(model: PipCacheModel): any {\r\n        if (!model || !model.name) { throw new Error('Model should be defined'); }\r\n        const dbName = this.getDbName(model.name);\r\n        if (this.openedDbs.has(dbName)) { return this.openedDbs.get(dbName); }\r\n        const db = new Dexie(dbName);\r\n        const modelKey = model.options.key || 'id';\r\n        db.version(2).stores({\r\n            items: modelKey,\r\n            hashes: 'hash',\r\n            lastRead: '',\r\n            meta: ''\r\n        });\r\n        this.openedDbs.set(dbName, db);\r\n        return db;\r\n    }\r\n\r\n    private getModel(modelName: string): PipCacheModel {\r\n        return this.models.find(m => m.name === modelName);\r\n    }\r\n\r\n    public get models(): PipCacheModel[] { return this.config.models || []; }\r\n\r\n    async getItem(modelName: string, key: any, options?: PipCacheInterceptorOptions): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const [expire, item] = await Promise.all([\r\n            db.table('lastRead').get(key),\r\n            db.table('items').get(key)\r\n        ]);\r\n        const maxAge = options && options.maxAge || model.options.maxAge;\r\n        const expired = expire + maxAge <= new Date().valueOf();\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET single item #' + key);\r\n            console.log('Item: ', item);\r\n            console.log('Expired: ', expired);\r\n            console.log('Expired at: ', new Date(expire));\r\n            console.groupEnd();\r\n        }\r\n        return expired ? null : item;\r\n    }\r\n    async getItems(modelName: string, payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const modelKey = model.options.key || 'id';\r\n        // get indexes of items we should receive\r\n        const maxAge = _.get(payload, 'interceptor.options.maxAge', model.options.maxAge);\r\n        if (this.config.enableLogs) {\r\n            console.groupCollapsed('[PipCache] GET collection of items');\r\n            console.log('Payload: ', payload);\r\n        }\r\n        const [pagination, params]: [PipCachePaginationParams, any]\r\n            = _.get(payload, 'interceptor.extractPagination', extractPaginationDefault)(payload && payload.httpParams);\r\n        const hasPagination = Object.keys(pagination).length !== 0;\r\n        const pars: PipCachePaginationParams = _.defaultsDeep(pagination, { offset: 0, limit: 0 });\r\n        const { offset, limit } = pars;\r\n        const hash = params && Object.keys(params).length ? objectHash.MD5(params) : '';\r\n        return db.table('hashes').get(hash)\r\n            .then((hi: TotalItem) => {\r\n                const total = hi && hi.total && hi.total.value && hi.total.lastRead + maxAge >= new Date().valueOf()\r\n                    ? hi.total.value : undefined;\r\n                const upper = offset + limit;\r\n                const plannedLength = hasPagination\r\n                    ? (limit ? (total ? (upper > total ? total - offset : limit) : limit) : (total ? (total - offset) : (limit)))\r\n                    : total;\r\n                let idxMap = hi && hi.idxMap || [];\r\n                if (hasPagination) {\r\n                    if (limit) {\r\n                        idxMap = idxMap.filter((it, idx) => idx >= offset && idx < upper);\r\n                        if (idxMap.length !== plannedLength) {\r\n                            if (this.config.enableLogs) {\r\n                                console.log('There\\'s not enough information about indexes');\r\n                                console.groupEnd();\r\n                            }\r\n                            return Promise.reject(null);\r\n                        }\r\n                    } else if (total !== undefined) {\r\n                        idxMap = idxMap.filter((it, idx) => idx >= offset);\r\n                        if (idxMap.length !== plannedLength) {\r\n                            if (this.config.enableLogs) {\r\n                                console.log('Not all items presented in cache');\r\n                                console.groupEnd();\r\n                            }\r\n                            return Promise.reject(null);\r\n                        }\r\n                    } else {\r\n                        if (this.config.enableLogs) {\r\n                            console.log('We want to return all items, but we don\\'t know how many they are');\r\n                            console.groupEnd();\r\n                        }\r\n                        return Promise.reject(null);\r\n                    }\r\n                } else if (total === undefined) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('We want to return all items, but we don\\'t know how many they are');\r\n                        console.groupEnd();\r\n                    }\r\n                    return Promise.reject(null);\r\n                }\r\n                return Promise.all([\r\n                    Promise.resolve(idxMap),\r\n                    !hasPagination && !hash ? db.table('items').toArray() : db.table('items').where(modelKey).anyOf(idxMap).toArray(),\r\n                    !hasPagination && !hash ? db.table('lastRead').toArray() : db.table('lastRead').where('').anyOf(idxMap).toArray()\r\n                ]);\r\n            }).then(([ids, items, reads]) => {\r\n                if (!items || items.length !== ids.length || !reads || reads.length !== ids.length) {\r\n                    if (this.config.enableLogs) {\r\n                        console.warn('Not all items presented in cache');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                if (Math.min(...reads) + maxAge <= new Date().valueOf()) {\r\n                    if (this.config.enableLogs) {\r\n                        console.log('Items was expired');\r\n                        console.groupEnd();\r\n                    }\r\n                    return null;\r\n                }\r\n                const res = ids.map(id => items.find(it => it[modelKey] === id));\r\n                if (this.config.enableLogs) {\r\n                    console.log('Items: ', res);\r\n                    console.groupEnd();\r\n                }\r\n                return res;\r\n            }).catch(reason => {\r\n                if (reason === null) {\r\n                    return null;\r\n                } else {\r\n                    throw reason;\r\n                }\r\n            });\r\n    }\r\n    async setItem(modelName: string, item: any, options?: { removeTotal?: boolean; }): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        const promises = [\r\n            db.table('lastRead').put(new Date().valueOf(), item[model.options.key]),\r\n            db.table('items').put(item)\r\n        ];\r\n        if (options) {\r\n            if (options.removeTotal) {\r\n                promises.push(db.table('hashes').toCollection().modify({ total: undefined }));\r\n            }\r\n        }\r\n        return Promise.all(promises).then((data) => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] SET single item #' + item[model.options.key]);\r\n                console.log('Item: ', data[1]);\r\n                console.log('Readed at: ', new Date());\r\n                console.groupEnd();\r\n            }\r\n            return data[1];\r\n        });\r\n    }\r\n    async setItems(modelName: string, items: any[], payload?: {\r\n        httpParams?: any,\r\n        interceptor?: PipCacheInterceptorCollectionSettings\r\n    }): Promise<any[]> {\r\n        const model = this.getModel(modelName);\r\n        const modelKey = model.options.key || 'id';\r\n        const db = this.getDb(model);\r\n        const lastRead = new Date().valueOf();\r\n        const ids = items.map(it => it[modelKey]);\r\n        let total;\r\n        const [pagination, params]: [PipCachePaginationParams, any]\r\n            = _.get(payload, 'interceptor.extractPagination', extractPaginationDefault)(payload && payload.httpParams);\r\n        const hasPagination = Object.keys(pagination).length !== 0;\r\n        const pars: PipCachePaginationParams = _.defaultsDeep(pagination, { offset: 0, limit: 0 });\r\n        const { offset, limit } = pars;\r\n        const hash = params && Object.keys(params).length ? objectHash.MD5(params) : '';\r\n        const promises = [\r\n            db.table('lastRead').bulkPut(new Array(items.length).fill(lastRead), ids),\r\n            db.table('items').bulkPut(items),\r\n            db.table('hashes').get(hash).then((hi: TotalItem) => {\r\n                const nh = hi || Object.assign(new TotalItem(), { hash, total: {}, idxMap: [] });\r\n                ids.forEach((id, idx) => nh.idxMap[idx + offset] = id);\r\n                if (hasPagination && pagination.limit && items.length && items.length < pagination.limit || !hasPagination) {\r\n                    total = (pagination.offset || 0) + items.length;\r\n                    nh.total = {\r\n                        value: total,\r\n                        lastRead\r\n                    };\r\n                }\r\n                return db.table('hashes').put(nh);\r\n            })\r\n        ];\r\n        return Promise.all(promises).then(() => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] SET collection of items');\r\n                console.log('Payload: ', payload);\r\n                console.log('Items: ', items);\r\n                console.log('Hash:', hash);\r\n                console.log('Last read at: ', new Date());\r\n                if (!_.isUndefined(total)) {\r\n                    console.log(`New total for hash [${hash}]: ${total}`);\r\n                }\r\n                console.groupEnd();\r\n            }\r\n            return items;\r\n        });\r\n    }\r\n    async deleteItems(modelName: string, keys: any[]): Promise<any> {\r\n        const model = this.getModel(modelName);\r\n        const db = this.getDb(model);\r\n        return Promise.all([\r\n            db.table('lastRead').bulkDelete(keys),\r\n            db.table('items').bulkDelete(keys),\r\n            db.transaction('rw', db.table('hashes'), async () => {\r\n                await db.table('hashes').toCollection().modify(function () {\r\n                    let removeTotal;\r\n                    keys.forEach(key => {\r\n                        const idx = this.value.idxMap.findIndex(id => id === key);\r\n                        if (idx >= 0) {\r\n                            this.value.idxMap.splice(idx, 1);\r\n                            removeTotal = true;\r\n                        }\r\n                    });\r\n                    if (removeTotal) {\r\n                        delete this.value.total;\r\n                    }\r\n                });\r\n            })\r\n        ]).then(() => {\r\n            if (this.config.enableLogs) {\r\n                console.groupCollapsed('[PipCache] DELETE');\r\n                console.log('Keys: ', keys);\r\n                console.groupEnd();\r\n            }\r\n        });\r\n    }\r\n    async clear(model?: string | string[]): Promise<any> {\r\n        return new Promise(resolve => {\r\n            const dbs: string[] = [];\r\n            if (model) {\r\n                Array.isArray(model)\r\n                    ? dbs.push(...model.map(m => this.getDbName(m)))\r\n                    : dbs.push(this.getDbName(model));\r\n                resolve(dbs);\r\n            } else {\r\n                resolve(Dexie.getDatabaseNames());\r\n            }\r\n        }).then((names: string[]) => {\r\n            const dbs = names.filter(name => name.startsWith(this.config.prefix));\r\n            if (this.config.enableLogs) {\r\n                console.log('databases to delete: ', names);\r\n            }\r\n            const promises = [];\r\n            for (const name of dbs) {\r\n                try {\r\n                    const db = this.openedDbs.has(name) ? this.openedDbs.get(name) : new Dexie(name);\r\n                    promises.push(db.table('items').clear());\r\n                    promises.push(db.table('meta').clear());\r\n                    promises.push(db.table('lastRead').clear());\r\n                    promises.push(db.table('hashes').clear());\r\n                } catch (err) {\r\n                    if (this.config.enableLogs) {\r\n                        console.warn('Error opening database ' + name);\r\n                    }\r\n                }\r\n            }\r\n            return Promise.all(promises);\r\n        }).then(res => {\r\n            if (this.config.enableLogs) {\r\n                console.log('[PipCache] CLEAR');\r\n                if (model) { console.log('Model(s): ', model); } else { console.log('all models'); }\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport interface ICacheProvider {\r\n    models: PipCacheModel[];\r\n    registerModel(model: PipCacheModel): boolean;\r\n}\r\n\r\nclass CacheProvider implements ICacheProvider {\r\n\r\n    private _service: ICacheService;\r\n\r\n    constructor(private pipCacheConfigProvider: ICacheConfigProvider) {\r\n        \"ngInject\";\r\n    }\r\n\r\n    public get models(): PipCacheModel[] { return this.pipCacheConfigProvider.models; }\r\n\r\n    public registerModel(model: PipCacheModel) {\r\n        if (!model) { return false; }\r\n        const res = this.models.find(m => m.name === model.name);\r\n        if (res) { return false; }\r\n        this.models.push(model);\r\n        return true;\r\n    }\r\n\r\n    public $get() {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) {\r\n            this._service = new CacheService(this.pipCacheConfigProvider);\r\n        }\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module(\"pipCache\")\r\n    .provider('pipCache', CacheProvider);","angular.module('pipCache', []);\r\n\r\nimport './cache-config.service';\r\nimport './cache.service';\r\nimport './cache.interceptor';\r\n\r\nexport * from './cache.models';\r\nexport * from './cache-config.service';\r\nexport * from './cache.service';\r\n","﻿import './cache/index';\r\n\r\nexport * from './cache/index';\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}